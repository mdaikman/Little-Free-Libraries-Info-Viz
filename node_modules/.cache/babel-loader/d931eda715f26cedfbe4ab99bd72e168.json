{"ast":null,"code":"import { useMemo, useCallback, createElement, Fragment as Fragment$1, useRef, useState, useEffect } from 'react';\nimport { useValueFormatter, usePropertyAccessor, useMotionConfig, Container, useDimensions, CartesianMarkers, SvgWrapper, ResponsiveWrapper, useTheme, getRelativeCursor, isCursorInRect } from '@nivo/core';\nimport { Grid, Axes, renderGridLinesToCanvas, renderAxesToCanvas } from '@nivo/axes';\nimport { BoxLegendSvg, renderLegendToCanvas } from '@nivo/legends';\nimport { useOrdinalColorScale } from '@nivo/colors';\nimport { computeXYScalesForSeries } from '@nivo/scales';\nimport { useAnnotations, Annotation, renderAnnotationsToCanvas } from '@nivo/annotations';\nimport get from 'lodash/get';\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport isPlainObject from 'lodash/isPlainObject';\nimport { scaleLinear } from 'd3-scale';\nimport { animated, useTransition } from '@react-spring/web';\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { BasicTooltip, useTooltip } from '@nivo/tooltip';\nimport { Mesh as Mesh$1, useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar isDynamicSizeSpec = function isDynamicSizeSpec(size) {\n  return isPlainObject(size);\n};\n\nvar getNodeSizeGenerator = function getNodeSizeGenerator(size) {\n  if (typeof size === 'function') return size;\n  if (isNumber(size)) return function () {\n    return size;\n  };\n\n  if (isDynamicSizeSpec(size)) {\n    if (!isString(size.key)) {\n      throw new Error('symbolSize is invalid, key should be a string pointing to the property to use to determine node size');\n    }\n\n    if (!Array.isArray(size.values) || size.values.length !== 2) {\n      throw new Error('symbolSize is invalid, values spec should be an array containing two values, min and max');\n    }\n\n    if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n      throw new Error('symbolSize is invalid, sizes spec should be an array containing two values, min and max');\n    }\n\n    var sizeScale = scaleLinear().domain([size.values[0], size.values[1]]).range([size.sizes[0], size.sizes[1]]);\n    return function (datum) {\n      return sizeScale(get(datum, size.key));\n    };\n  }\n\n  throw new Error('nodeSize is invalid, it should be either a function, a number or an object');\n};\n\nvar computePoints = function computePoints(_ref) {\n  var series = _ref.series,\n      formatX = _ref.formatX,\n      formatY = _ref.formatY,\n      getNodeId = _ref.getNodeId;\n  var points = [];\n  series.forEach(function (serie) {\n    serie.data.forEach(function (d, serieIndex) {\n      var point = {\n        index: points.length,\n        serieIndex: serieIndex,\n        serieId: serie.id,\n        x: d.position.x,\n        xValue: d.data.x,\n        formattedX: formatX(d.data.x),\n        y: d.position.y,\n        yValue: d.data.y,\n        formattedY: formatY(d.data.y),\n        data: d.data\n      };\n      points.push(_objectSpread2(_objectSpread2({}, point), {}, {\n        id: getNodeId(point)\n      }));\n    });\n  });\n  return points;\n};\n\nvar useNodeSize = function useNodeSize(size) {\n  return useMemo(function () {\n    return getNodeSizeGenerator(size);\n  }, [size]);\n};\n\nvar useScatterPlot = function useScatterPlot(_ref) {\n  var data = _ref.data,\n      xScaleSpec = _ref.xScaleSpec,\n      xFormat = _ref.xFormat,\n      yScaleSpec = _ref.yScaleSpec,\n      yFormat = _ref.yFormat,\n      width = _ref.width,\n      height = _ref.height,\n      nodeId = _ref.nodeId,\n      nodeSize = _ref.nodeSize,\n      colors = _ref.colors;\n\n  var _useMemo = useMemo(function () {\n    return computeXYScalesForSeries(data, xScaleSpec, yScaleSpec, width, height);\n  }, [data, xScaleSpec, yScaleSpec, width, height]),\n      series = _useMemo.series,\n      xScale = _useMemo.xScale,\n      yScale = _useMemo.yScale;\n\n  var formatX = useValueFormatter(xFormat);\n  var formatY = useValueFormatter(yFormat);\n  var getNodeId = usePropertyAccessor(nodeId);\n  var rawNodes = useMemo(function () {\n    return computePoints({\n      series: series,\n      formatX: formatX,\n      formatY: formatY,\n      getNodeId: getNodeId\n    });\n  }, [series, formatX, formatY, getNodeId]);\n  var getNodeSize = useNodeSize(nodeSize);\n  var getColor = useOrdinalColorScale(colors, 'serieId');\n  var nodes = useMemo(function () {\n    return rawNodes.map(function (rawNode) {\n      return _objectSpread2(_objectSpread2({}, rawNode), {}, {\n        size: getNodeSize(rawNode),\n        color: getColor({\n          serieId: rawNode.serieId\n        })\n      });\n    });\n  }, [rawNodes, getNodeSize, getColor]);\n  var legendData = useMemo(function () {\n    return series.map(function (serie) {\n      return {\n        id: serie.id,\n        label: serie.id,\n        color: getColor({\n          serieId: serie.id\n        })\n      };\n    });\n  }, [series, getColor]);\n  return {\n    xScale: xScale,\n    yScale: yScale,\n    nodes: nodes,\n    legendData: legendData\n  };\n};\n\nvar useScatterPlotAnnotations = function useScatterPlotAnnotations(items, annotations) {\n  return useAnnotations({\n    data: items,\n    annotations: annotations,\n    getPosition: function getPosition(node) {\n      return {\n        x: node.x,\n        y: node.y\n      };\n    },\n    getDimensions: function getDimensions(node) {\n      return {\n        size: node.size,\n        width: node.size,\n        height: node.size\n      };\n    }\n  });\n};\n\nvar interpolateRadius = function interpolateRadius(size) {\n  return size / 2;\n};\n\nvar Node = function Node(_ref) {\n  var node = _ref.node,\n      style = _ref.style,\n      blendMode = _ref.blendMode,\n      isInteractive = _ref.isInteractive,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick;\n  var handleMouseEnter = useCallback(function (event) {\n    return onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(node, event);\n  }, [node, onMouseEnter]);\n  var handleMouseMove = useCallback(function (event) {\n    return onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove(node, event);\n  }, [node, onMouseMove]);\n  var handleMouseLeave = useCallback(function (event) {\n    return onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(node, event);\n  }, [node, onMouseLeave]);\n  var handleClick = useCallback(function (event) {\n    return onClick === null || onClick === void 0 ? void 0 : onClick(node, event);\n  }, [node, onClick]);\n  return jsx(animated.circle, {\n    cx: style.x,\n    cy: style.y,\n    r: style.size.to(interpolateRadius),\n    fill: style.color,\n    style: {\n      mixBlendMode: blendMode\n    },\n    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n    onMouseMove: isInteractive ? handleMouseMove : undefined,\n    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n    onClick: isInteractive ? handleClick : undefined\n  });\n};\n\nvar Tooltip = function Tooltip(_ref) {\n  var node = _ref.node;\n  return jsx(BasicTooltip, {\n    id: node.serieId,\n    value: \"x: \".concat(node.formattedX, \", y: \").concat(node.formattedY),\n    enableChip: true,\n    color: node.color\n  });\n};\n\nvar commonDefaultProps = {\n  xScale: {\n    type: 'linear',\n    min: 0,\n    max: 'auto'\n  },\n  yScale: {\n    type: 'linear',\n    min: 0,\n    max: 'auto'\n  },\n  enableGridX: true,\n  enableGridY: true,\n  axisBottom: {},\n  axisLeft: {},\n  nodeId: function nodeId(_ref) {\n    var serieId = _ref.serieId,\n        index = _ref.index;\n    return \"\".concat(serieId, \".\").concat(index);\n  },\n  nodeSize: 9,\n  nodeComponent: Node,\n  colors: {\n    scheme: 'nivo'\n  },\n  isInteractive: true,\n  debugMesh: false,\n  tooltip: Tooltip,\n  markers: [],\n  legends: [],\n  annotations: []\n};\n\nvar svgDefaultProps = _objectSpread2(_objectSpread2({}, commonDefaultProps), {}, {\n  blendMode: 'normal',\n  layers: ['grid', 'axes', 'nodes', 'markers', 'mesh', 'legends', 'annotations'],\n  role: 'img',\n  useMesh: true,\n  animate: true,\n  motionConfig: 'default'\n});\n\nvar canvasDefaultProps = _objectSpread2(_objectSpread2({}, commonDefaultProps), {}, {\n  layers: ['grid', 'axes', 'nodes', 'mesh', 'legends', 'annotations'],\n  pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n  renderNode: function renderNode(ctx, node) {\n    ctx.beginPath();\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI);\n    ctx.fillStyle = node.color;\n    ctx.fill();\n  }\n});\n\nvar ScatterPlotAnnotations = function ScatterPlotAnnotations(_ref) {\n  var nodes = _ref.nodes,\n      annotations = _ref.annotations;\n  var boundAnnotations = useScatterPlotAnnotations(nodes, annotations);\n  return jsx(Fragment, {\n    children: boundAnnotations.map(function (annotation, i) {\n      return jsx(Annotation, _objectSpread2({}, annotation), i);\n    })\n  });\n};\n\nvar getNodeKey = function getNodeKey(node) {\n  return node.id;\n};\n\nvar regularTransition = function regularTransition(node) {\n  return {\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color\n  };\n};\n\nvar leaveTransition = function leaveTransition(node) {\n  return {\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color\n  };\n};\n\nvar Nodes = function Nodes(_ref) {\n  var nodes = _ref.nodes,\n      nodeComponent = _ref.nodeComponent,\n      isInteractive = _ref.isInteractive,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick,\n      tooltip = _ref.tooltip,\n      blendMode = _ref.blendMode;\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var transition = useTransition(nodes, {\n    keys: getNodeKey,\n    from: regularTransition,\n    enter: regularTransition,\n    update: regularTransition,\n    leave: leaveTransition,\n    config: springConfig,\n    immediate: !animate\n  });\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseEnter = useCallback(function (node, event) {\n    showTooltipFromEvent(createElement(tooltip, {\n      node: node\n    }), event);\n    onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(node, event);\n  }, [tooltip, showTooltipFromEvent, onMouseEnter]);\n  var handleMouseMove = useCallback(function (node, event) {\n    showTooltipFromEvent(createElement(tooltip, {\n      node: node\n    }), event);\n    onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove(node, event);\n  }, [tooltip, showTooltipFromEvent, onMouseMove]);\n  var handleMouseLeave = useCallback(function (node, event) {\n    hideTooltip();\n    onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(node, event);\n  }, [hideTooltip, onMouseLeave]);\n  var handleClick = useCallback(function (node, event) {\n    return onClick === null || onClick === void 0 ? void 0 : onClick(node, event);\n  }, [onClick]);\n  return jsx(Fragment, {\n    children: transition(function (style, node) {\n      return createElement(nodeComponent, {\n        node: node,\n        style: style,\n        blendMode: blendMode,\n        isInteractive: isInteractive,\n        onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n        onMouseMove: isInteractive ? handleMouseMove : undefined,\n        onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n        onClick: isInteractive ? handleClick : undefined\n      });\n    })\n  });\n};\n\nvar Mesh = function Mesh(_ref) {\n  var nodes = _ref.nodes,\n      width = _ref.width,\n      height = _ref.height,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick,\n      tooltip = _ref.tooltip,\n      debug = _ref.debug;\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseEnter = useCallback(function (node, event) {\n    showTooltipFromEvent(createElement(tooltip, {\n      node: node\n    }), event);\n    onMouseEnter && onMouseEnter(node, event);\n  }, [showTooltipFromEvent, tooltip, onMouseEnter]);\n  var handleMouseMove = useCallback(function (node, event) {\n    showTooltipFromEvent(createElement(tooltip, {\n      node: node\n    }), event);\n    onMouseMove && onMouseMove(node, event);\n  }, [showTooltipFromEvent, tooltip, onMouseMove]);\n  var handleMouseLeave = useCallback(function (node, event) {\n    hideTooltip();\n    onMouseLeave && onMouseLeave(node, event);\n  }, [hideTooltip, onMouseLeave]);\n  var handleClick = useCallback(function (node, event) {\n    onClick && onClick(node, event);\n  }, [onClick]);\n  return jsx(Mesh$1, {\n    nodes: nodes,\n    width: width,\n    height: height,\n    onMouseEnter: handleMouseEnter,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    onClick: handleClick,\n    debug: debug\n  });\n};\n\nvar InnerScatterPlot = function InnerScatterPlot(_ref) {\n  var data = _ref.data,\n      _ref$xScale = _ref.xScale,\n      xScaleSpec = _ref$xScale === void 0 ? svgDefaultProps.xScale : _ref$xScale,\n      xFormat = _ref.xFormat,\n      _ref$yScale = _ref.yScale,\n      yScaleSpec = _ref$yScale === void 0 ? svgDefaultProps.yScale : _ref$yScale,\n      yFormat = _ref.yFormat,\n      width = _ref.width,\n      height = _ref.height,\n      partialMargin = _ref.margin,\n      _ref$layers = _ref.layers,\n      layers = _ref$layers === void 0 ? svgDefaultProps.layers : _ref$layers,\n      _ref$colors = _ref.colors,\n      colors = _ref$colors === void 0 ? svgDefaultProps.colors : _ref$colors,\n      _ref$blendMode = _ref.blendMode,\n      blendMode = _ref$blendMode === void 0 ? svgDefaultProps.blendMode : _ref$blendMode,\n      _ref$nodeId = _ref.nodeId,\n      nodeId = _ref$nodeId === void 0 ? svgDefaultProps.nodeId : _ref$nodeId,\n      _ref$nodeSize = _ref.nodeSize,\n      nodeSize = _ref$nodeSize === void 0 ? svgDefaultProps.nodeSize : _ref$nodeSize,\n      _ref$nodeComponent = _ref.nodeComponent,\n      nodeComponent = _ref$nodeComponent === void 0 ? svgDefaultProps.nodeComponent : _ref$nodeComponent,\n      _ref$enableGridX = _ref.enableGridX,\n      enableGridX = _ref$enableGridX === void 0 ? svgDefaultProps.enableGridX : _ref$enableGridX,\n      _ref$enableGridY = _ref.enableGridY,\n      enableGridY = _ref$enableGridY === void 0 ? svgDefaultProps.enableGridY : _ref$enableGridY,\n      gridXValues = _ref.gridXValues,\n      gridYValues = _ref.gridYValues,\n      axisTop = _ref.axisTop,\n      axisRight = _ref.axisRight,\n      _ref$axisBottom = _ref.axisBottom,\n      axisBottom = _ref$axisBottom === void 0 ? svgDefaultProps.axisBottom : _ref$axisBottom,\n      _ref$axisLeft = _ref.axisLeft,\n      axisLeft = _ref$axisLeft === void 0 ? svgDefaultProps.axisLeft : _ref$axisLeft,\n      _ref$annotations = _ref.annotations,\n      annotations = _ref$annotations === void 0 ? svgDefaultProps.annotations : _ref$annotations,\n      _ref$isInteractive = _ref.isInteractive,\n      isInteractive = _ref$isInteractive === void 0 ? svgDefaultProps.isInteractive : _ref$isInteractive,\n      _ref$useMesh = _ref.useMesh,\n      useMesh = _ref$useMesh === void 0 ? svgDefaultProps.useMesh : _ref$useMesh,\n      _ref$debugMesh = _ref.debugMesh,\n      debugMesh = _ref$debugMesh === void 0 ? svgDefaultProps.debugMesh : _ref$debugMesh,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick,\n      _ref$tooltip = _ref.tooltip,\n      tooltip = _ref$tooltip === void 0 ? svgDefaultProps.tooltip : _ref$tooltip,\n      _ref$markers = _ref.markers,\n      markers = _ref$markers === void 0 ? svgDefaultProps.markers : _ref$markers,\n      _ref$legends = _ref.legends,\n      legends = _ref$legends === void 0 ? svgDefaultProps.legends : _ref$legends,\n      _ref$role = _ref.role,\n      role = _ref$role === void 0 ? svgDefaultProps.role : _ref$role,\n      ariaLabel = _ref.ariaLabel,\n      ariaLabelledBy = _ref.ariaLabelledBy,\n      ariaDescribedBy = _ref.ariaDescribedBy;\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var _useScatterPlot = useScatterPlot({\n    data: data,\n    xScaleSpec: xScaleSpec,\n    xFormat: xFormat,\n    yScaleSpec: yScaleSpec,\n    yFormat: yFormat,\n    width: innerWidth,\n    height: innerHeight,\n    nodeId: nodeId,\n    nodeSize: nodeSize,\n    colors: colors\n  }),\n      xScale = _useScatterPlot.xScale,\n      yScale = _useScatterPlot.yScale,\n      nodes = _useScatterPlot.nodes,\n      legendData = _useScatterPlot.legendData;\n\n  var customLayerProps = useMemo(function () {\n    return {\n      xScale: xScale,\n      yScale: yScale,\n      nodes: nodes,\n      margin: margin,\n      innerWidth: innerWidth,\n      innerHeight: innerHeight,\n      outerWidth: outerWidth,\n      outerHeight: outerHeight\n    };\n  }, [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]);\n  var layerById = {\n    grid: null,\n    axes: null,\n    nodes: null,\n    markers: null,\n    mesh: null,\n    annotations: null,\n    legends: null\n  };\n\n  if (layers.includes('grid')) {\n    layerById.grid = jsx(Grid, {\n      width: innerWidth,\n      height: innerHeight,\n      xScale: enableGridX ? xScale : null,\n      yScale: enableGridY ? yScale : null,\n      xValues: gridXValues,\n      yValues: gridYValues\n    }, \"grid\");\n  }\n\n  if (layers.includes('axes')) {\n    layerById.axes = jsx(Axes, {\n      xScale: xScale,\n      yScale: yScale,\n      width: innerWidth,\n      height: innerHeight,\n      top: axisTop,\n      right: axisRight,\n      bottom: axisBottom,\n      left: axisLeft\n    }, \"axes\");\n  }\n\n  if (layers.includes('nodes')) {\n    layerById.nodes = jsx(Nodes, {\n      nodes: nodes,\n      nodeComponent: nodeComponent,\n      isInteractive: isInteractive,\n      tooltip: tooltip,\n      blendMode: blendMode,\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      onClick: onClick\n    }, \"nodes\");\n  }\n\n  if (layers.includes('markers')) {\n    layerById.markers = jsx(CartesianMarkers, {\n      markers: markers,\n      width: innerWidth,\n      height: innerHeight,\n      xScale: xScale,\n      yScale: yScale\n    }, \"markers\");\n  }\n\n  if (layers.includes('mesh') && isInteractive && useMesh) {\n    layerById.mesh = jsx(Mesh, {\n      nodes: nodes,\n      width: innerWidth,\n      height: innerHeight,\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      onClick: onClick,\n      tooltip: tooltip,\n      debug: debugMesh\n    }, \"mesh\");\n  }\n\n  if (layers.includes('annotations')) {\n    layerById.annotations = jsx(ScatterPlotAnnotations, {\n      nodes: nodes,\n      annotations: annotations\n    }, \"annotations\");\n  }\n\n  if (layers.includes('legends')) {\n    layerById.legends = legends.map(function (legend, i) {\n      return jsx(BoxLegendSvg, _objectSpread2(_objectSpread2({}, legend), {}, {\n        containerWidth: innerWidth,\n        containerHeight: innerHeight,\n        data: legendData\n      }), i);\n    });\n  }\n\n  return jsx(SvgWrapper, {\n    width: outerWidth,\n    height: outerHeight,\n    margin: margin,\n    role: role,\n    ariaLabel: ariaLabel,\n    ariaLabelledBy: ariaLabelledBy,\n    ariaDescribedBy: ariaDescribedBy,\n    children: layers.map(function (layer, i) {\n      if (typeof layer === 'string' && layerById[layer] !== undefined) {\n        return layerById[layer];\n      }\n\n      if (typeof layer === 'function') {\n        return jsx(Fragment$1, {\n          children: createElement(layer, customLayerProps)\n        }, i);\n      }\n\n      throw new Error(\"Unknown layer (\".concat(layer, \")\"));\n    })\n  });\n};\n\nvar ScatterPlot = function ScatterPlot(_ref2) {\n  var _ref2$isInteractive = _ref2.isInteractive,\n      isInteractive = _ref2$isInteractive === void 0 ? svgDefaultProps.isInteractive : _ref2$isInteractive,\n      _ref2$animate = _ref2.animate,\n      animate = _ref2$animate === void 0 ? svgDefaultProps.animate : _ref2$animate,\n      _ref2$motionConfig = _ref2.motionConfig,\n      motionConfig = _ref2$motionConfig === void 0 ? svgDefaultProps.motionConfig : _ref2$motionConfig,\n      theme = _ref2.theme,\n      renderWrapper = _ref2.renderWrapper,\n      otherProps = _objectWithoutProperties(_ref2, [\"isInteractive\", \"animate\", \"motionConfig\", \"theme\", \"renderWrapper\"]);\n\n  return jsx(Container, {\n    animate: animate,\n    isInteractive: isInteractive,\n    motionConfig: motionConfig,\n    renderWrapper: renderWrapper,\n    theme: theme,\n    children: jsx(InnerScatterPlot, _objectSpread2({\n      isInteractive: isInteractive\n    }, otherProps))\n  });\n};\n\nvar ResponsiveScatterPlot = function ResponsiveScatterPlot(props) {\n  return jsx(ResponsiveWrapper, {\n    children: function children(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      return jsx(ScatterPlot, _objectSpread2({\n        width: width,\n        height: height\n      }, props));\n    }\n  });\n};\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar InnerScatterPlotCanvas = function InnerScatterPlotCanvas(_ref) {\n  var data = _ref.data,\n      _ref$xScale = _ref.xScale,\n      xScaleSpec = _ref$xScale === void 0 ? canvasDefaultProps.xScale : _ref$xScale,\n      xFormat = _ref.xFormat,\n      _ref$yScale = _ref.yScale,\n      yScaleSpec = _ref$yScale === void 0 ? canvasDefaultProps.yScale : _ref$yScale,\n      yFormat = _ref.yFormat,\n      width = _ref.width,\n      height = _ref.height,\n      partialMargin = _ref.margin,\n      _ref$pixelRatio = _ref.pixelRatio,\n      pixelRatio = _ref$pixelRatio === void 0 ? canvasDefaultProps.pixelRatio : _ref$pixelRatio,\n      _ref$layers = _ref.layers,\n      layers = _ref$layers === void 0 ? canvasDefaultProps.layers : _ref$layers,\n      _ref$colors = _ref.colors,\n      colors = _ref$colors === void 0 ? canvasDefaultProps.colors : _ref$colors,\n      _ref$nodeId = _ref.nodeId,\n      nodeId = _ref$nodeId === void 0 ? svgDefaultProps.nodeId : _ref$nodeId,\n      _ref$nodeSize = _ref.nodeSize,\n      nodeSize = _ref$nodeSize === void 0 ? canvasDefaultProps.nodeSize : _ref$nodeSize,\n      _ref$renderNode = _ref.renderNode,\n      renderNode = _ref$renderNode === void 0 ? canvasDefaultProps.renderNode : _ref$renderNode,\n      _ref$enableGridX = _ref.enableGridX,\n      enableGridX = _ref$enableGridX === void 0 ? canvasDefaultProps.enableGridX : _ref$enableGridX,\n      gridXValues = _ref.gridXValues,\n      _ref$enableGridY = _ref.enableGridY,\n      enableGridY = _ref$enableGridY === void 0 ? canvasDefaultProps.enableGridY : _ref$enableGridY,\n      gridYValues = _ref.gridYValues,\n      axisTop = _ref.axisTop,\n      axisRight = _ref.axisRight,\n      _ref$axisBottom = _ref.axisBottom,\n      axisBottom = _ref$axisBottom === void 0 ? canvasDefaultProps.axisBottom : _ref$axisBottom,\n      _ref$axisLeft = _ref.axisLeft,\n      axisLeft = _ref$axisLeft === void 0 ? canvasDefaultProps.axisLeft : _ref$axisLeft,\n      _ref$annotations = _ref.annotations,\n      annotations = _ref$annotations === void 0 ? canvasDefaultProps.annotations : _ref$annotations,\n      _ref$isInteractive = _ref.isInteractive,\n      isInteractive = _ref$isInteractive === void 0 ? canvasDefaultProps.isInteractive : _ref$isInteractive,\n      _ref$debugMesh = _ref.debugMesh,\n      debugMesh = _ref$debugMesh === void 0 ? canvasDefaultProps.debugMesh : _ref$debugMesh,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick,\n      _ref$tooltip = _ref.tooltip,\n      tooltip = _ref$tooltip === void 0 ? canvasDefaultProps.tooltip : _ref$tooltip,\n      _ref$legends = _ref.legends,\n      legends = _ref$legends === void 0 ? canvasDefaultProps.legends : _ref$legends;\n  var canvasEl = useRef(null);\n  var theme = useTheme();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentNode = _useState2[0],\n      setCurrentNode = _useState2[1];\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var _useScatterPlot = useScatterPlot({\n    data: data,\n    xScaleSpec: xScaleSpec,\n    xFormat: xFormat,\n    yScaleSpec: yScaleSpec,\n    yFormat: yFormat,\n    width: innerWidth,\n    height: innerHeight,\n    nodeId: nodeId,\n    nodeSize: nodeSize,\n    colors: colors\n  }),\n      xScale = _useScatterPlot.xScale,\n      yScale = _useScatterPlot.yScale,\n      nodes = _useScatterPlot.nodes,\n      legendData = _useScatterPlot.legendData;\n\n  var boundAnnotations = useScatterPlotAnnotations(nodes, annotations);\n\n  var _useVoronoiMesh = useVoronoiMesh({\n    points: nodes,\n    width: innerWidth,\n    height: innerHeight,\n    debug: debugMesh\n  }),\n      delaunay = _useVoronoiMesh.delaunay,\n      voronoi = _useVoronoiMesh.voronoi;\n\n  var customLayerProps = useMemo(function () {\n    return {\n      xScale: xScale,\n      yScale: yScale,\n      nodes: nodes,\n      margin: margin,\n      innerWidth: innerWidth,\n      innerHeight: innerHeight,\n      outerWidth: outerWidth,\n      outerHeight: outerHeight\n    };\n  }, [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]);\n  useEffect(function () {\n    if (!canvasEl.current) return;\n    canvasEl.current.width = outerWidth * pixelRatio;\n    canvasEl.current.height = outerHeight * pixelRatio;\n    var ctx = canvasEl.current.getContext('2d');\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.fillStyle = theme.background;\n    ctx.fillRect(0, 0, outerWidth, outerHeight);\n    ctx.translate(margin.left, margin.top);\n    layers.forEach(function (layer) {\n      if (layer === 'grid') {\n        ctx.lineWidth = theme.grid.line.strokeWidth;\n        ctx.strokeStyle = theme.grid.line.stroke;\n        enableGridX && renderGridLinesToCanvas(ctx, {\n          width: innerWidth,\n          height: innerHeight,\n          scale: xScale,\n          axis: 'x',\n          values: gridXValues\n        });\n        enableGridY && renderGridLinesToCanvas(ctx, {\n          width: innerWidth,\n          height: innerHeight,\n          scale: yScale,\n          axis: 'y',\n          values: gridYValues\n        });\n      } else if (layer === 'annotations') {\n        renderAnnotationsToCanvas(ctx, {\n          annotations: boundAnnotations,\n          theme: theme\n        });\n      } else if (layer === 'axes') {\n        renderAxesToCanvas(ctx, {\n          xScale: xScale,\n          yScale: yScale,\n          width: innerWidth,\n          height: innerHeight,\n          top: axisTop,\n          right: axisRight,\n          bottom: axisBottom,\n          left: axisLeft,\n          theme: theme\n        });\n      } else if (layer === 'nodes') {\n        nodes.forEach(function (node) {\n          renderNode(ctx, node);\n        });\n      } else if (layer === 'mesh') {\n        if (debugMesh === true) {\n          renderVoronoiToCanvas(ctx, voronoi);\n\n          if (currentNode) {\n            renderVoronoiCellToCanvas(ctx, voronoi, currentNode.index);\n          }\n        }\n      } else if (layer === 'legends') {\n        legends.forEach(function (legend) {\n          renderLegendToCanvas(ctx, _objectSpread2(_objectSpread2({}, legend), {}, {\n            data: legendData,\n            containerWidth: innerWidth,\n            containerHeight: innerHeight,\n            theme: theme\n          }));\n        });\n      } else if (typeof layer === 'function') {\n        layer(ctx, customLayerProps);\n      } else {\n        throw new Error(\"Invalid layer: \".concat(layer));\n      }\n    });\n  }, [canvasEl, innerWidth, innerHeight, outerWidth, outerHeight, margin.top, margin.left, pixelRatio, renderNode, layers, customLayerProps, theme, xScale, yScale, nodes, enableGridX, enableGridY, axisTop, axisRight, axisBottom, axisLeft, legends, legendData, debugMesh, voronoi, currentNode]);\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var getNodeFromMouseEvent = useCallback(function (event) {\n    var _getRelativeCursor = getRelativeCursor(canvasEl.current, event),\n        _getRelativeCursor2 = _slicedToArray(_getRelativeCursor, 2),\n        x = _getRelativeCursor2[0],\n        y = _getRelativeCursor2[1];\n\n    if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null;\n    var nodeIndex = delaunay.find(x - margin.left, y - margin.top);\n    return nodes[nodeIndex];\n  }, [canvasEl, margin, innerWidth, innerHeight, delaunay]);\n  var handleMouseHover = useCallback(function (event) {\n    var node = getNodeFromMouseEvent(event);\n    setCurrentNode(node);\n\n    if (node) {\n      showTooltipFromEvent(createElement(tooltip, {\n        node: node\n      }), event);\n\n      if (currentNode && currentNode.id !== node.id) {\n        onMouseLeave && onMouseLeave(currentNode, event);\n        onMouseEnter && onMouseEnter(node, event);\n      }\n\n      if (!currentNode) {\n        onMouseEnter && onMouseEnter(node, event);\n      }\n\n      onMouseMove && onMouseMove(node, event);\n    } else {\n      hideTooltip();\n      currentNode && onMouseLeave && onMouseLeave(currentNode, event);\n    }\n  }, [getNodeFromMouseEvent, currentNode, setCurrentNode, showTooltipFromEvent, hideTooltip, tooltip, onMouseEnter, onMouseMove, onMouseLeave]);\n  var handleMouseLeave = useCallback(function (event) {\n    hideTooltip();\n    setCurrentNode(null);\n    currentNode && onMouseLeave && onMouseLeave(currentNode, event);\n  }, [hideTooltip, currentNode, setCurrentNode, onMouseLeave]);\n  var handleClick = useCallback(function (event) {\n    if (onClick) {\n      var node = getNodeFromMouseEvent(event);\n      node && onClick(node, event);\n    }\n  }, [getNodeFromMouseEvent, onClick]);\n  return jsx(\"canvas\", {\n    ref: canvasEl,\n    width: outerWidth * pixelRatio,\n    height: outerHeight * pixelRatio,\n    style: {\n      width: outerWidth,\n      height: outerHeight,\n      cursor: isInteractive ? 'auto' : 'normal'\n    },\n    onMouseEnter: isInteractive ? handleMouseHover : undefined,\n    onMouseMove: isInteractive ? handleMouseHover : undefined,\n    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n    onClick: isInteractive ? handleClick : undefined\n  });\n};\n\nvar ScatterPlotCanvas = function ScatterPlotCanvas(_ref2) {\n  var isInteractive = _ref2.isInteractive,\n      renderWrapper = _ref2.renderWrapper,\n      theme = _ref2.theme,\n      props = _objectWithoutProperties(_ref2, [\"isInteractive\", \"renderWrapper\", \"theme\"]);\n\n  return jsx(Container, {\n    isInteractive: isInteractive,\n    renderWrapper: renderWrapper,\n    theme: theme,\n    animate: false,\n    children: jsx(InnerScatterPlotCanvas, _objectSpread2({}, props))\n  });\n};\n\nvar ResponsiveScatterPlotCanvas = function ResponsiveScatterPlotCanvas(props) {\n  return jsx(ResponsiveWrapper, {\n    children: function children(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      return jsx(ScatterPlotCanvas, _objectSpread2({\n        width: width,\n        height: height\n      }, props));\n    }\n  });\n};\n\nexport { ResponsiveScatterPlot, ResponsiveScatterPlotCanvas, ScatterPlot, ScatterPlotCanvas, canvasDefaultProps, commonDefaultProps, svgDefaultProps, useScatterPlot, useScatterPlotAnnotations };","map":{"version":3,"sources":["../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../src/compute.ts","../src/hooks.ts","../src/Node.tsx","../src/Tooltip.tsx","../src/props.tsx","../src/ScatterPlotAnnotations.tsx","../src/Nodes.tsx","../src/Mesh.tsx","../src/ScatterPlot.tsx","../src/ResponsiveScatterPlot.tsx","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../src/ScatterPlotCanvas.tsx","../src/ResponsiveScatterPlotCanvas.tsx"],"names":["objectWithoutPropertiesLoose","defineProperty","isDynamicSizeSpec","isPlainObject","getNodeSizeGenerator","isNumber","isString","size","Array","sizeScale","scaleLinear","get","computePoints","series","formatX","formatY","getNodeId","points","serie","point","index","serieIndex","serieId","x","d","xValue","formattedX","y","yValue","formattedY","data","id","useNodeSize","useMemo","useScatterPlot","xScaleSpec","xFormat","yScaleSpec","yFormat","width","height","nodeId","nodeSize","colors","xScale","yScale","computeXYScalesForSeries","useValueFormatter","usePropertyAccessor","rawNodes","getNodeSize","getColor","useOrdinalColorScale","nodes","color","rawNode","legendData","label","useScatterPlotAnnotations","useAnnotations","annotations","getPosition","node","getDimensions","interpolateRadius","Node","style","blendMode","isInteractive","onMouseEnter","onMouseMove","onMouseLeave","onClick","handleMouseEnter","useCallback","handleMouseMove","handleMouseLeave","handleClick","mixBlendMode","undefined","Tooltip","commonDefaultProps","type","min","max","enableGridX","enableGridY","axisBottom","axisLeft","nodeComponent","scheme","debugMesh","tooltip","markers","legends","svgDefaultProps","layers","role","useMesh","animate","motionConfig","canvasDefaultProps","pixelRatio","window","renderNode","ctx","Math","ScatterPlotAnnotations","boundAnnotations","_jsx","getNodeKey","regularTransition","leaveTransition","Nodes","springConfig","useMotionConfig","transition","useTransition","keys","from","enter","update","leave","config","immediate","showTooltipFromEvent","hideTooltip","useTooltip","createElement","Mesh","debug","InnerScatterPlot","margin","partialMargin","gridXValues","gridYValues","axisTop","axisRight","ariaLabel","ariaLabelledBy","ariaDescribedBy","innerWidth","innerHeight","outerWidth","outerHeight","useDimensions","customLayerProps","layerById","grid","axes","mesh","ScatterPlot","theme","renderWrapper","otherProps","ResponsiveScatterPlot","arrayLikeToArray","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","InnerScatterPlotCanvas","canvasEl","useRef","useTheme","currentNode","setCurrentNode","useState","delaunay","voronoi","useVoronoiMesh","useEffect","layer","renderGridLinesToCanvas","scale","axis","values","renderAnnotationsToCanvas","renderAxesToCanvas","top","right","bottom","left","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","containerWidth","containerHeight","getNodeFromMouseEvent","getRelativeCursor","isCursorInRect","nodeIndex","handleMouseHover","cursor","ScatterPlotCanvas","props","ResponsiveScatterPlotCanvas"],"mappings":";;;;;;;;;;;;;;;;;AAAe,SAAS,6BAAT,CAAuC,MAAvC,EAA+C,QAA/C,EAAyD;AACtE,MAAI,MAAM,IAAI,IAAd,EAAoB,OAAO,EAAP;AACpB,MAAI,MAAM,GAAG,EAAb;AACA,MAAI,UAAU,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,CAAjB;AACA,MAAI,GAAJ,EAAS,CAAT;;AAEA,OAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,UAAU,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,IAAA,GAAG,GAAG,UAAU,CAAC,CAAD,CAAhB;AACA,QAAI,QAAQ,CAAC,OAAT,CAAiB,GAAjB,KAAyB,CAA7B,EAAgC;AAChC,IAAA,MAAM,CAAC,GAAD,CAAN,GAAc,MAAM,CAAC,GAAD,CAApB;AACD;;AAED,SAAO,MAAP;AACF;;ACZe,SAAS,wBAAT,CAAkC,MAAlC,EAA0C,QAA1C,EAAoD;AACjE,MAAI,MAAM,IAAI,IAAd,EAAoB,OAAO,EAAP;;AACpB,MAAI,MAAM,GAAGA,6BAA4B,CAAC,MAAD,EAAS,QAAT,CAAzC;;AACA,MAAI,GAAJ,EAAS,CAAT;;AAEA,MAAI,MAAM,CAAC,qBAAX,EAAkC;AAChC,QAAI,gBAAgB,GAAG,MAAM,CAAC,qBAAP,CAA6B,MAA7B,CAAvB;;AAEA,SAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,gBAAgB,CAAC,MAAjC,EAAyC,CAAC,EAA1C,EAA8C;AAC5C,MAAA,GAAG,GAAG,gBAAgB,CAAC,CAAD,CAAtB;AACA,UAAI,QAAQ,CAAC,OAAT,CAAiB,GAAjB,KAAyB,CAA7B,EAAgC;AAChC,UAAI,CAAC,MAAM,CAAC,SAAP,CAAiB,oBAAjB,CAAsC,IAAtC,CAA2C,MAA3C,EAAmD,GAAnD,CAAL,EAA8D;AAC9D,MAAA,MAAM,CAAC,GAAD,CAAN,GAAc,MAAM,CAAC,GAAD,CAApB;AACD;AACF;;AAED,SAAO,MAAP;AACF;;AClBe,SAAS,eAAT,CAAyB,GAAzB,EAA8B,GAA9B,EAAmC,KAAnC,EAA0C;AACvD,MAAI,GAAG,IAAI,GAAX,EAAgB;AACd,IAAA,MAAM,CAAC,cAAP,CAAsB,GAAtB,EAA2B,GAA3B,EAAgC;AAC9B,MAAA,KAAK,EAAE,KADuB;AAE9B,MAAA,UAAU,EAAE,IAFkB;AAG9B,MAAA,YAAY,EAAE,IAHgB;AAI9B,MAAA,QAAQ,EAAE;AAJoB,KAAhC;AAMD,GAPD,MAOO;AACL,IAAA,GAAG,CAAC,GAAD,CAAH,GAAW,KAAX;AACD;;AAED,SAAO,GAAP;AACF;;ACXA,SAAS,OAAT,CAAiB,MAAjB,EAAyB,cAAzB,EAAyC;AACvC,MAAI,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,CAAX;;AAEA,MAAI,MAAM,CAAC,qBAAX,EAAkC;AAChC,QAAI,OAAO,GAAG,MAAM,CAAC,qBAAP,CAA6B,MAA7B,CAAd;AACA,QAAI,cAAJ,EAAoB,OAAO,GAAG,OAAO,CAAC,MAAR,CAAe,UAAU,GAAV,EAAe;AAC1D,aAAO,MAAM,CAAC,wBAAP,CAAgC,MAAhC,EAAwC,GAAxC,EAA6C,UAApD;AACD,KAF6B,CAAV;AAGpB,IAAA,IAAI,CAAC,IAAL,CAAU,KAAV,CAAgB,IAAhB,EAAsB,OAAtB;AACD;;AAED,SAAO,IAAP;AACD;;AAEc,SAAS,cAAT,CAAwB,MAAxB,EAAgC;AAC7C,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAAS,CAAC,MAA9B,EAAsC,CAAC,EAAvC,EAA2C;AACzC,QAAI,MAAM,GAAG,SAAS,CAAC,CAAD,CAAT,IAAgB,IAAhB,GAAuB,SAAS,CAAC,CAAD,CAAhC,GAAsC,EAAnD;;AAEA,QAAI,CAAC,GAAG,CAAR,EAAW;AACT,MAAA,OAAO,CAAC,MAAM,CAAC,MAAD,CAAP,EAAiB,IAAjB,CAAP,CAA8B,OAA9B,CAAsC,UAAU,GAAV,EAAe;AACnDC,QAAAA,eAAc,CAAC,MAAD,EAAS,GAAT,EAAc,MAAM,CAAC,GAAD,CAApB,CAAdA;AACD,OAFD;AAGD,KAJD,MAIO,IAAI,MAAM,CAAC,yBAAX,EAAsC;AAC3C,MAAA,MAAM,CAAC,gBAAP,CAAwB,MAAxB,EAAgC,MAAM,CAAC,yBAAP,CAAiC,MAAjC,CAAhC;AACD,KAFM,MAEA;AACL,MAAA,OAAO,CAAC,MAAM,CAAC,MAAD,CAAP,CAAP,CAAwB,OAAxB,CAAgC,UAAU,GAAV,EAAe;AAC7C,QAAA,MAAM,CAAC,cAAP,CAAsB,MAAtB,EAA8B,GAA9B,EAAmC,MAAM,CAAC,wBAAP,CAAgC,MAAhC,EAAwC,GAAxC,CAAnC;AACD,OAFD;AAGD;AACF;;AAED,SAAO,MAAP;AACF;;ACrBA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,IAAA,EAAA;AAAA,SAEmBC,aAAa,CAFhC,IAEgC,CAFhC;AAA1B,CAAA;;AAIO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAA,IAAA,EAE/B;AACD,MAAI,OAAA,IAAA,KAAJ,UAAA,EAAgC,OAAA,IAAA;AAChC,MAAIC,QAAQ,CAAZ,IAAY,CAAZ,EAAoB,OAAO,YAAA;AAAA,WAAA,IAAA;AAAP,GAAA;;AACpB,MAAIH,iBAAiB,CAArB,IAAqB,CAArB,EAAuC;AACnC,QAAI,CAACI,QAAQ,CAACC,IAAI,CAAlB,GAAa,CAAb,EAAyB;AACrB,YAAM,IAAA,KAAA,CAAN,sGAAM,CAAN;AAGH;;AACD,QAAI,CAACC,KAAK,CAALA,OAAAA,CAAcD,IAAI,CAAnB,MAACC,CAAD,IAA+BD,IAAI,CAAJA,MAAAA,CAAAA,MAAAA,KAAnC,CAAA,EAA6D;AACzD,YAAM,IAAA,KAAA,CAAN,0FAAM,CAAN;AAGH;;AACD,QAAI,CAACC,KAAK,CAALA,OAAAA,CAAcD,IAAI,CAAnB,KAACC,CAAD,IAA8BD,IAAI,CAAJA,KAAAA,CAAAA,MAAAA,KAAlC,CAAA,EAA2D;AACvD,YAAM,IAAA,KAAA,CAAN,yFAAM,CAAN;AAGH;;AAED,QAAME,SAAS,GAAGC,WAAW,GAAXA,MAAAA,CACN,CAACH,IAAI,CAAJA,MAAAA,CAAD,CAACA,CAAD,EAAiBA,IAAI,CAAJA,MAAAA,CADXG,CACWH,CAAjB,CADMG,EAAAA,KAAAA,CAEP,CAACH,IAAI,CAAJA,KAAAA,CAAD,CAACA,CAAD,EAAgBA,IAAI,CAAJA,KAAAA,CAF3B,CAE2BA,CAAhB,CAFOG,CAAlB;AAIA,WAAO,UAAA,KAAA,EAAA;AAAA,aACHD,SAAS,CAACE,GAAG,CAAA,KAAA,EAAQJ,IAAI,CADtB,GACU,CAAJ,CADN;AAAP,KAAA;AAEH;;AAED,QAAM,IAAA,KAAA,CAAN,4EAAM,CAAN;AA9BG,CAAA;;AAiCA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAAA,IAAA,EAUkC;AAAA,MAT3DC,MAS2D,GAAA,IAAA,CAT3DA,MAS2D;AAAA,MAR3DC,OAQ2D,GAAA,IAAA,CAR3DA,OAQ2D;AAAA,MAP3DC,OAO2D,GAAA,IAAA,CAP3DA,OAO2D;AAAA,MAN3DC,SAM2D,GAAA,IAAA,CAN3DA,SAM2D;AAC3D,MAAMC,MAA+D,GAArE,EAAA;AAEAJ,EAAAA,MAAM,CAANA,OAAAA,CAAe,UAAA,KAAA,EAAS;AACpBK,IAAAA,KAAK,CAALA,IAAAA,CAAAA,OAAAA,CAAmB,UAAA,CAAA,EAAA,UAAA,EAAmB;AAClC,UAAMC,KAAmE,GAAG;AACxEC,QAAAA,KAAK,EAAEH,MAAM,CAD2D,MAAA;AAExEI,QAAAA,UAAU,EAF8D,UAAA;AAGxEC,QAAAA,OAAO,EAAEJ,KAAK,CAH0D,EAAA;AAIxEK,QAAAA,CAAC,EAAEC,CAAC,CAADA,QAAAA,CAJqE,CAAA;AAKxEC,QAAAA,MAAM,EAAED,CAAC,CAADA,IAAAA,CALgE,CAAA;AAMxEE,QAAAA,UAAU,EAAEZ,OAAO,CAACU,CAAC,CAADA,IAAAA,CANoD,CAMrD,CANqD;AAOxEG,QAAAA,CAAC,EAAEH,CAAC,CAADA,QAAAA,CAPqE,CAAA;AAQxEI,QAAAA,MAAM,EAAEJ,CAAC,CAADA,IAAAA,CARgE,CAAA;AASxEK,QAAAA,UAAU,EAAEd,OAAO,CAACS,CAAC,CAADA,IAAAA,CAToD,CASrD,CATqD;AAUxEM,QAAAA,IAAI,EAAEN,CAAC,CAACM;AAVgE,OAA5E;AAaAb,MAAAA,MAAM,CAANA,IAAAA,CAAAA,cAAAA,CAAAA,cAAAA,CAAAA,EAAAA,EAAAA,KAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAEIc,QAAAA,EAAE,EAAEf,SAAS,CAAA,KAAA;AAFjBC,OAAAA,CAAAA;AAdJC,KAAAA;AADJL,GAAAA;AAsBA,SAAA,MAAA;AAnCG,CAAA;;ACrCP,IAAMmB,WAAW,GAAG,SAAdA,WAAc,CAAA,IAAA,EAAA;AAAA,SAEfC,OAAO,CAAC,YAAA;AAAA,WAAM7B,oBAAoB,CAA1B,IAA0B,CAA1B;AAAD,GAAA,EAA6C,CAFrC,IAEqC,CAA7C,CAFQ;AAApB,CAAA;;IAIa8B,cAAc,GAAG,SAAjBA,cAAiB,CAAA,IAAA,EAsBxB;AAAA,MArBFJ,IAqBE,GAAA,IAAA,CArBFA,IAqBE;AAAA,MApBFK,UAoBE,GAAA,IAAA,CApBFA,UAoBE;AAAA,MAnBFC,OAmBE,GAAA,IAAA,CAnBFA,OAmBE;AAAA,MAlBFC,UAkBE,GAAA,IAAA,CAlBFA,UAkBE;AAAA,MAjBFC,OAiBE,GAAA,IAAA,CAjBFA,OAiBE;AAAA,MAhBFC,KAgBE,GAAA,IAAA,CAhBFA,KAgBE;AAAA,MAfFC,MAeE,GAAA,IAAA,CAfFA,MAeE;AAAA,MAdFC,MAcE,GAAA,IAAA,CAdFA,MAcE;AAAA,MAbFC,QAaE,GAAA,IAAA,CAbFA,QAaE;AAAA,MAZFC,MAYE,GAAA,IAAA,CAZFA,MAYE;;AAAA,MAAA,QAAA,GACiCV,OAAO,CACtC,YAAA;AAAA,WACIa,wBAAwB,CAAA,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA,KAAA,EAD5B,MAC4B,CAD5B;AADsC,GAAA,EAStC,CAAA,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA,KAAA,EAVF,MAUE,CATsC,CADxC;AAAA,MACMjC,MADN,GAAA,QAAA,CAAA,MAAA;AAAA,MACc+B,MADd,GAAA,QAAA,CAAA,MAAA;AAAA,MACsBC,MADtB,GAAA,QAAA,CAAA,MAAA;;AAaF,MAAM/B,OAAO,GAAGiC,iBAAiB,CAAjC,OAAiC,CAAjC;AACA,MAAMhC,OAAO,GAAGgC,iBAAiB,CAAjC,OAAiC,CAAjC;AACA,MAAM/B,SAAS,GAAGgC,mBAAmB,CAArC,MAAqC,CAArC;AACA,MAAMC,QAAQ,GAAGhB,OAAO,CACpB,YAAA;AAAA,WAAMrB,aAAa,CAAW;AAAEC,MAAAA,MAAM,EAAR,MAAA;AAAUC,MAAAA,OAAO,EAAjB,OAAA;AAAmBC,MAAAA,OAAO,EAA1B,OAAA;AAA4BC,MAAAA,SAAS,EAATA;AAA5B,KAAX,CAAnB;AADoB,GAAA,EAEpB,CAAA,MAAA,EAAA,OAAA,EAAA,OAAA,EAFJ,SAEI,CAFoB,CAAxB;AAKA,MAAMkC,WAAW,GAAGlB,WAAW,CAA/B,QAA+B,CAA/B;AAEA,MAAMmB,QAAQ,GAAGC,oBAAoB,CAAA,MAAA,EAArC,SAAqC,CAArC;AAEA,MAAMC,KAAsC,GAAGpB,OAAO,CAClD,YAAA;AAAA,WACI,QAAQ,CAAR,GAAA,CAAa,UAAA,OAAA,EAAO;AAAA,aAAA,cAAA,CAAA,cAAA,CAAA,EAAA,EAAA,OAAA,CAAA,EAAA,EAAA,EAAA;AAEhB1B,QAAAA,IAAI,EAAE2C,WAAW,CAFD,OAEC,CAFD;AAGhBI,QAAAA,KAAK,EAAEH,QAAQ,CAAC;AAAE7B,UAAAA,OAAO,EAAEiC,OAAO,CAACjC;AAAnB,SAAD;AAHC,OAAA,CAAA;AADxB,KACI,CADJ;AADkD,GAAA,EAOlD,CAAA,QAAA,EAAA,WAAA,EAPJ,QAOI,CAPkD,CAAtD;AAUA,MAAMkC,UAAU,GAAGvB,OAAO,CACtB,YAAA;AAAA,WACI,MAAM,CAAN,GAAA,CAAW,UAAA,KAAA,EAAK;AAAA,aAAK;AACjBF,QAAAA,EAAE,EAAEb,KAAK,CADQ,EAAA;AAEjBuC,QAAAA,KAAK,EAAEvC,KAAK,CAFK,EAAA;AAGjBoC,QAAAA,KAAK,EAAEH,QAAQ,CAAC;AAAE7B,UAAAA,OAAO,EAAEJ,KAAK,CAACa;AAAjB,SAAD;AAHE,OAAL;AADpB,KACI,CADJ;AADsB,GAAA,EAOtB,CAAA,MAAA,EAPJ,QAOI,CAPsB,CAA1B;AAUA,SAAO;AACHa,IAAAA,MAAM,EADH,MAAA;AAEHC,IAAAA,MAAM,EAFH,MAAA;AAGHQ,IAAAA,KAAK,EAHF,KAAA;AAIHG,IAAAA,UAAU,EAAVA;AAJG,GAAP;AAMH,C;;IAEYE,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAA,KAAA,EAAA,WAAA,EAAA;AAAA,SAIrCC,cAAc,CAAgC;AAC1C7B,IAAAA,IAAI,EADsC,KAAA;AAE1C8B,IAAAA,WAAW,EAF+B,WAAA;AAG1CC,IAAAA,WAAW,EAAE,SAAA,WAAA,CAAA,IAAA,EAAA;AAAA,aAA0C;AACnDtC,QAAAA,CAAC,EAAEuC,IAAI,CAD4C,CAAA;AAEnDnC,QAAAA,CAAC,EAAEmC,IAAI,CAACnC;AAF2C,OAA1C;AAH6B,KAAA;AAO1CoC,IAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,IAAA,EAAA;AAAA,aAA0C;AACrDxD,QAAAA,IAAI,EAAEuD,IAAI,CAD2C,IAAA;AAErDvB,QAAAA,KAAK,EAAEuB,IAAI,CAF0C,IAAA;AAGrDtB,QAAAA,MAAM,EAAEsB,IAAI,CAACvD;AAHwC,OAA1C;AAAA;AAP2B,GAAhC,CAJuB;AAAA,C;;ACxFzC,IAAMyD,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,IAAA,EAAA;AAAA,SAAkBzD,IAAI,GAAtB,CAAA;AAA1B,CAAA;;AAEO,IAAM0D,IAAI,GAAG,SAAPA,IAAO,CAAA,IAAA,EASkB;AAAA,MARlCH,IAQkC,GAAA,IAAA,CARlCA,IAQkC;AAAA,MAPlCI,KAOkC,GAAA,IAAA,CAPlCA,KAOkC;AAAA,MANlCC,SAMkC,GAAA,IAAA,CANlCA,SAMkC;AAAA,MALlCC,aAKkC,GAAA,IAAA,CALlCA,aAKkC;AAAA,MAJlCC,YAIkC,GAAA,IAAA,CAJlCA,YAIkC;AAAA,MAHlCC,WAGkC,GAAA,IAAA,CAHlCA,WAGkC;AAAA,MAFlCC,YAEkC,GAAA,IAAA,CAFlCA,YAEkC;AAAA,MADlCC,OACkC,GAAA,IAAA,CADlCA,OACkC;AAClC,MAAMC,gBAAgB,GAAGC,WAAW,CAAC,UAAA,KAAA,EAAK;AAAA,WAAIL,YAAJ,KAAA,IAAIA,IAAAA,YAAJ,KAAA,KAAA,CAAIA,GAAJ,KAAA,CAAIA,GAAAA,YAAY,CAAA,IAAA,EAAhB,KAAgB,CAAhB;AAAN,GAAA,EAAuC,CAAA,IAAA,EAA3E,YAA2E,CAAvC,CAApC;AACA,MAAMM,eAAe,GAAGD,WAAW,CAAC,UAAA,KAAA,EAAK;AAAA,WAAIJ,WAAJ,KAAA,IAAIA,IAAAA,WAAJ,KAAA,KAAA,CAAIA,GAAJ,KAAA,CAAIA,GAAAA,WAAW,CAAA,IAAA,EAAf,KAAe,CAAf;AAAN,GAAA,EAAsC,CAAA,IAAA,EAAzE,WAAyE,CAAtC,CAAnC;AACA,MAAMM,gBAAgB,GAAGF,WAAW,CAAC,UAAA,KAAA,EAAK;AAAA,WAAIH,YAAJ,KAAA,IAAIA,IAAAA,YAAJ,KAAA,KAAA,CAAIA,GAAJ,KAAA,CAAIA,GAAAA,YAAY,CAAA,IAAA,EAAhB,KAAgB,CAAhB;AAAN,GAAA,EAAuC,CAAA,IAAA,EAA3E,YAA2E,CAAvC,CAApC;AACA,MAAMM,WAAW,GAAGH,WAAW,CAAC,UAAA,KAAA,EAAK;AAAA,WAAIF,OAAJ,KAAA,IAAIA,IAAAA,OAAJ,KAAA,KAAA,CAAIA,GAAJ,KAAA,CAAIA,GAAAA,OAAO,CAAA,IAAA,EAAX,KAAW,CAAX;AAAN,GAAA,EAAkC,CAAA,IAAA,EAAjE,OAAiE,CAAlC,CAA/B;AAEA,SACI,GAAA,CAAC,QAAD,CAAA,MAAA,EAAA;AACI,IAAA,EAAE,EAAEN,KAAK,CADb,CAAA;AAEI,IAAA,EAAE,EAAEA,KAAK,CAFb,CAAA;AAGI,IAAA,CAAC,EAAEA,KAAK,CAALA,IAAAA,CAAAA,EAAAA,CAHP,iBAGOA,CAHP;AAII,IAAA,IAAI,EAAEA,KAAK,CAJf,KAAA;AAKI,IAAA,KAAK,EAAE;AAAEY,MAAAA,YAAY,EAAEX;AAAhB,KALX;AAMI,IAAA,YAAY,EAAEC,aAAa,GAAA,gBAAA,GAN/B,SAAA;AAOI,IAAA,WAAW,EAAEA,aAAa,GAAA,eAAA,GAP9B,SAAA;AAQI,IAAA,YAAY,EAAEA,aAAa,GAAA,gBAAA,GAR/B,SAAA;AASI,IAAA,OAAO,EAAEA,aAAa,GAAA,WAAA,GAAiBW;AAT3C,GAAA,CADJ;AAfG,CAAA;;ACHA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAA,IAAA,EAAA;AAAA,MACnBlB,IADmB,GAAA,IAAA,CAAA,IAAA;AAAA,SAGnB,GAAA,CAAA,YAAA,EAAA;AACI,IAAA,EAAE,EAAEA,IAAI,CADZ,OAAA;AAEI,IAAA,KAAK,EAAA,MAAA,MAAA,CAAQA,IAAI,CAAZ,UAAA,EAAA,OAAA,EAAA,MAAA,CAA+BA,IAAI,CAF5C,UAES,CAFT;AAGI,IAAA,UAAU,EAHd,IAAA;AAII,IAAA,KAAK,EAAEA,IAAI,CAACR;AAJhB,GAAA,CAHmB;AAAhB,CAAA;;ICOM2B,kBAAkB,GAAG;AAC9BrC,EAAAA,MAAM,EAAE;AACJsC,IAAAA,IAAI,EADA,QAAA;AAEJC,IAAAA,GAAG,EAFC,CAAA;AAGJC,IAAAA,GAAG,EAAE;AAHD,GADsB;AAM9BvC,EAAAA,MAAM,EAAE;AACJqC,IAAAA,IAAI,EADA,QAAA;AAEJC,IAAAA,GAAG,EAFC,CAAA;AAGJC,IAAAA,GAAG,EAAE;AAHD,GANsB;AAY9BC,EAAAA,WAAW,EAZmB,IAAA;AAa9BC,EAAAA,WAAW,EAbmB,IAAA;AAc9BC,EAAAA,UAAU,EAdoB,EAAA;AAe9BC,EAAAA,QAAQ,EAfsB,EAAA;AAiB9B/C,EAAAA,MAAM,EAAG,gBAAA,IAAA,EAAA;AAAA,QAAGnB,OAAH,GAAA,IAAA,CAAA,OAAA;AAAA,QAAYF,KAAZ,GAAA,IAAA,CAAA,KAAA;AAAA,WAAA,GAAA,MAAA,CAAA,OAAA,EAAA,GAAA,EAAA,MAAA,CAAA,KAAA,CAAA;AAjBqB,GAAA;AAoB9BsB,EAAAA,QAAQ,EApBsB,CAAA;AAqB9B+C,EAAAA,aAAa,EArBiB,IAAA;AAuB9B9C,EAAAA,MAAM,EAAE;AAAE+C,IAAAA,MAAM,EAAE;AAAV,GAvBsB;AAyB9BtB,EAAAA,aAAa,EAzBiB,IAAA;AA0B9BuB,EAAAA,SAAS,EA1BqB,KAAA;AA4B9BC,EAAAA,OAAO,EA5BuB,OAAA;AA8B9BC,EAAAA,OAAO,EA9BuB,EAAA;AAgC9BC,EAAAA,OAAO,EAhCuB,EAAA;AAkC9BlC,EAAAA,WAAW,EAAE;AAlCiB,C;;IAqCrBmC,eAAe,GAAA,cAAA,CAAA,cAAA,CAAA,EAAA,EAAA,kBAAA,CAAA,EAAA,EAAA,EAAA;AAExB5B,EAAAA,SAAS,EAFe,QAAA;AAGxB6B,EAAAA,MAAM,EAAE,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,EAAA,MAAA,EAAA,SAAA,EAHgB,aAGhB,CAHgB;AAYxBC,EAAAA,IAAI,EAZoB,KAAA;AAaxBC,EAAAA,OAAO,EAbiB,IAAA;AAcxBC,EAAAA,OAAO,EAdiB,IAAA;AAexBC,EAAAA,YAAY,EAAE;AAfU,CAAA,C;;IAkBfC,kBAAkB,GAAA,cAAA,CAAA,cAAA,CAAA,EAAA,EAAA,kBAAA,CAAA,EAAA,EAAA,EAAA;AAE3BL,EAAAA,MAAM,EAAE,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,SAAA,EAFmB,aAEnB,CAFmB;AAG3BM,EAAAA,UAAU,EAAE,OAAA,MAAA,KAAA,WAAA,GAAgCC,MAAM,CAANA,gBAAAA,IAAhC,CAAA,GAHe,CAAA;AAI3BC,EAAAA,UAAU,EAAE,SAAA,UAAA,CAAA,GAAA,EAAA,IAAA,EAAgF;AACxFC,IAAAA,GAAG,CAAHA,SAAAA;AACAA,IAAAA,GAAG,CAAHA,GAAAA,CAAQ3C,IAAI,CAAZ2C,CAAAA,EAAgB3C,IAAI,CAApB2C,CAAAA,EAAwB3C,IAAI,CAAJA,IAAAA,GAAxB2C,CAAAA,EAAAA,CAAAA,EAA0C,IAAIC,IAAI,CAAlDD,EAAAA;AACAA,IAAAA,GAAG,CAAHA,SAAAA,GAAgB3C,IAAI,CAApB2C,KAAAA;AACAA,IAAAA,GAAG,CAAHA,IAAAA;AACH;AAT0B,CAAA,C;;ACxDxB,IAAME,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,IAAA,EAGO;AAAA,MAFzCtD,KAEyC,GAAA,IAAA,CAFzCA,KAEyC;AAAA,MADzCO,WACyC,GAAA,IAAA,CADzCA,WACyC;AACzC,MAAMgD,gBAAgB,GAAGlD,yBAAyB,CAAA,KAAA,EAAlD,WAAkD,CAAlD;AAEA,SACI,GAAA,CAAA,QAAA,EAAA;AAAA,IAAA,QAAA,EACK,gBAAgB,CAAhB,GAAA,CAAqB,UAAA,UAAA,EAAA,CAAA,EAAA;AAAA,aAClBmD,GAAAA,CAAAA,UAAAA,EAAAA,cAAAA,CAAAA,EAAAA,EAAAA,UAAAA,CAAAA,EADkB,CAClBA,CADkB;AAArB,KAAA;AADL,GAAA,CADJ;AANG,CAAA;;ACcP,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAA,IAAA,EAAA;AAAA,SACfhD,IAAI,CADW,EAAA;AAAnB,CAAA;;AAEA,IAAMiD,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,IAAA,EAAA;AAAA,SAEpB;AACFxF,IAAAA,CAAC,EAAEuC,IAAI,CADL,CAAA;AAEFnC,IAAAA,CAAC,EAAEmC,IAAI,CAFL,CAAA;AAGFvD,IAAAA,IAAI,EAAEuD,IAAI,CAHR,IAAA;AAIFR,IAAAA,KAAK,EAAEQ,IAAI,CAACR;AAJV,GAFoB;AAA1B,CAAA;;AAQA,IAAM0D,eAAe,GAAG,SAAlBA,eAAkB,CAAA,IAAA,EAAA;AAAA,SAElB;AACFzF,IAAAA,CAAC,EAAEuC,IAAI,CADL,CAAA;AAEFnC,IAAAA,CAAC,EAAEmC,IAAI,CAFL,CAAA;AAGFvD,IAAAA,IAAI,EAHF,CAAA;AAIF+C,IAAAA,KAAK,EAAEQ,IAAI,CAACR;AAJV,GAFkB;AAAxB,CAAA;;AASO,IAAM2D,KAAK,GAAG,SAARA,KAAQ,CAAA,IAAA,EAUO;AAAA,MATxB5D,KASwB,GAAA,IAAA,CATxBA,KASwB;AAAA,MARxBoC,aAQwB,GAAA,IAAA,CARxBA,aAQwB;AAAA,MAPxBrB,aAOwB,GAAA,IAAA,CAPxBA,aAOwB;AAAA,MANxBC,YAMwB,GAAA,IAAA,CANxBA,YAMwB;AAAA,MALxBC,WAKwB,GAAA,IAAA,CALxBA,WAKwB;AAAA,MAJxBC,YAIwB,GAAA,IAAA,CAJxBA,YAIwB;AAAA,MAHxBC,OAGwB,GAAA,IAAA,CAHxBA,OAGwB;AAAA,MAFxBoB,OAEwB,GAAA,IAAA,CAFxBA,OAEwB;AAAA,MADxBzB,SACwB,GAAA,IAAA,CADxBA,SACwB;;AAAA,MAAA,gBAAA,GACkBgD,eADlB,EAAA;AAAA,MAChBhB,OADgB,GAAA,gBAAA,CAAA,OAAA;AAAA,MACCe,YADD,GAAA,gBAAA,CAAA,MAAA;;AAExB,MAAME,UAAU,GAAGC,aAAa,CAAA,KAAA,EAQvB;AACLC,IAAAA,IAAI,EADC,UAAA;AAELC,IAAAA,IAAI,EAFC,iBAAA;AAGLC,IAAAA,KAAK,EAHA,iBAAA;AAILC,IAAAA,MAAM,EAJD,iBAAA;AAKLC,IAAAA,KAAK,EALA,eAAA;AAMLC,IAAAA,MAAM,EAND,YAAA;AAOLC,IAAAA,SAAS,EAAE,CAACzB;AAPP,GARuB,CAAhC;;AAFwB,MAAA,WAAA,GAoBsB4B,UApBtB,EAAA;AAAA,MAoBhBF,oBApBgB,GAAA,WAAA,CAAA,oBAAA;AAAA,MAoBMC,WApBN,GAAA,WAAA,CAAA,WAAA;;AAqBxB,MAAMrD,gBAAgB,GAAGC,WAAW,CAChC,UAAA,IAAA,EAAA,KAAA,EAAiB;AACbmD,IAAAA,oBAAoB,CAACG,aAAa,CAAA,OAAA,EAAU;AAAElE,MAAAA,IAAI,EAAJA;AAAF,KAAV,CAAd,EAApB+D,KAAoB,CAApBA;AACAxD,IAAAA,YAAY,KAAZA,IAAAA,IAAAA,YAAY,KAAA,KAAZA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAY,CAAA,IAAA,EAAZA,KAAY,CAAZA;AAH4B,GAAA,EAKhC,CAAA,OAAA,EAAA,oBAAA,EALJ,YAKI,CALgC,CAApC;AAOA,MAAMM,eAAe,GAAGD,WAAW,CAC/B,UAAA,IAAA,EAAA,KAAA,EAAiB;AACbmD,IAAAA,oBAAoB,CAACG,aAAa,CAAA,OAAA,EAAU;AAAElE,MAAAA,IAAI,EAAJA;AAAF,KAAV,CAAd,EAApB+D,KAAoB,CAApBA;AACAvD,IAAAA,WAAW,KAAXA,IAAAA,IAAAA,WAAW,KAAA,KAAXA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,WAAW,CAAA,IAAA,EAAXA,KAAW,CAAXA;AAH2B,GAAA,EAK/B,CAAA,OAAA,EAAA,oBAAA,EALJ,WAKI,CAL+B,CAAnC;AAOA,MAAMM,gBAAgB,GAAGF,WAAW,CAChC,UAAA,IAAA,EAAA,KAAA,EAAiB;AACboD,IAAAA,WAAW;AACXvD,IAAAA,YAAY,KAAZA,IAAAA,IAAAA,YAAY,KAAA,KAAZA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAY,CAAA,IAAA,EAAZA,KAAY,CAAZA;AAH4B,GAAA,EAKhC,CAAA,WAAA,EALJ,YAKI,CALgC,CAApC;AAOA,MAAMM,WAAW,GAAGH,WAAW,CAAC,UAAA,IAAA,EAAA,KAAA,EAAA;AAAA,WAAiBF,OAAjB,KAAA,IAAiBA,IAAAA,OAAjB,KAAA,KAAA,CAAiBA,GAAjB,KAAA,CAAiBA,GAAAA,OAAO,CAAA,IAAA,EAAxB,KAAwB,CAAxB;AAAD,GAAA,EAA0C,CAAzE,OAAyE,CAA1C,CAA/B;AAEA,SACI,GAAA,CAAA,QAAA,EAAA;AAAA,IAAA,QAAA,EACK4C,UAAU,CAAC,UAAA,KAAA,EAAA,IAAA,EAAA;AAAA,aACRY,aAAa,CAAA,aAAA,EAAgB;AACzBlE,QAAAA,IAAI,EADqB,IAAA;AAEzBI,QAAAA,KAAK,EAFoB,KAAA;AAGzBC,QAAAA,SAAS,EAHgB,SAAA;AAIzBC,QAAAA,aAAa,EAJY,aAAA;AAKzBC,QAAAA,YAAY,EAAED,aAAa,GAAA,gBAAA,GALF,SAAA;AAMzBE,QAAAA,WAAW,EAAEF,aAAa,GAAA,eAAA,GAND,SAAA;AAOzBG,QAAAA,YAAY,EAAEH,aAAa,GAAA,gBAAA,GAPF,SAAA;AAQzBI,QAAAA,OAAO,EAAEJ,aAAa,GAAA,WAAA,GAAiBW;AARd,OAAhB,CADL;AAAD,KAAA;AADf,GAAA,CADJ;AAtDG,CAAA;;ACzBA,IAAMkD,IAAI,GAAG,SAAPA,IAAO,CAAA,IAAA,EAUO;AAAA,MATvB5E,KASuB,GAAA,IAAA,CATvBA,KASuB;AAAA,MARvBd,KAQuB,GAAA,IAAA,CARvBA,KAQuB;AAAA,MAPvBC,MAOuB,GAAA,IAAA,CAPvBA,MAOuB;AAAA,MANvB6B,YAMuB,GAAA,IAAA,CANvBA,YAMuB;AAAA,MALvBC,WAKuB,GAAA,IAAA,CALvBA,WAKuB;AAAA,MAJvBC,YAIuB,GAAA,IAAA,CAJvBA,YAIuB;AAAA,MAHvBC,OAGuB,GAAA,IAAA,CAHvBA,OAGuB;AAAA,MAFvBoB,OAEuB,GAAA,IAAA,CAFvBA,OAEuB;AAAA,MADvBsC,KACuB,GAAA,IAAA,CADvBA,KACuB;;AAAA,MAAA,WAAA,GACuBH,UADvB,EAAA;AAAA,MACfF,oBADe,GAAA,WAAA,CAAA,oBAAA;AAAA,MACOC,WADP,GAAA,WAAA,CAAA,WAAA;;AAGvB,MAAMrD,gBAAgB,GAAGC,WAAW,CAChC,UAAA,IAAA,EAAA,KAAA,EAAgD;AAC5CmD,IAAAA,oBAAoB,CAACG,aAAa,CAAA,OAAA,EAAU;AAAElE,MAAAA,IAAI,EAAJA;AAAF,KAAV,CAAd,EAApB+D,KAAoB,CAApBA;AACAxD,IAAAA,YAAY,IAAIA,YAAY,CAAA,IAAA,EAA5BA,KAA4B,CAA5BA;AAH4B,GAAA,EAKhC,CAAA,oBAAA,EAAA,OAAA,EALJ,YAKI,CALgC,CAApC;AAQA,MAAMM,eAAe,GAAGD,WAAW,CAC/B,UAAA,IAAA,EAAA,KAAA,EAAgD;AAC5CmD,IAAAA,oBAAoB,CAACG,aAAa,CAAA,OAAA,EAAU;AAAElE,MAAAA,IAAI,EAAJA;AAAF,KAAV,CAAd,EAApB+D,KAAoB,CAApBA;AACAvD,IAAAA,WAAW,IAAIA,WAAW,CAAA,IAAA,EAA1BA,KAA0B,CAA1BA;AAH2B,GAAA,EAK/B,CAAA,oBAAA,EAAA,OAAA,EALJ,WAKI,CAL+B,CAAnC;AAQA,MAAMM,gBAAgB,GAAGF,WAAW,CAChC,UAAA,IAAA,EAAA,KAAA,EAAgD;AAC5CoD,IAAAA,WAAW;AACXvD,IAAAA,YAAY,IAAIA,YAAY,CAAA,IAAA,EAA5BA,KAA4B,CAA5BA;AAH4B,GAAA,EAKhC,CAAA,WAAA,EALJ,YAKI,CALgC,CAApC;AAQA,MAAMM,WAAW,GAAGH,WAAW,CAC3B,UAAA,IAAA,EAAA,KAAA,EAAgD;AAC5CF,IAAAA,OAAO,IAAIA,OAAO,CAAA,IAAA,EAAlBA,KAAkB,CAAlBA;AAFuB,GAAA,EAI3B,CAJJ,OAII,CAJ2B,CAA/B;AAOA,SACI,GAAA,CAAA,MAAA,EAAA;AACI,IAAA,KAAK,EADT,KAAA;AAEI,IAAA,KAAK,EAFT,KAAA;AAGI,IAAA,MAAM,EAHV,MAAA;AAII,IAAA,YAAY,EAJhB,gBAAA;AAKI,IAAA,WAAW,EALf,eAAA;AAMI,IAAA,YAAY,EANhB,gBAAA;AAOI,IAAA,OAAO,EAPX,WAAA;AAQI,IAAA,KAAK,EAAE0D;AARX,GAAA,CADJ;AA5CG,CAAA;;ACDP,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,IAAA,EAsCc;AAAA,MArCnCrG,IAqCmC,GAAA,IAAA,CArCnCA,IAqCmC;AAAA,MAAA,WAAA,GAAA,IAAA,CApCnCc,MAoCmC;AAAA,MApC3BT,UAoC2B,GAAA,WAAA,KAAA,KAAA,CAAA,GApCd4D,eAAe,CAACnD,MAoCF,GAAA,WAAA;AAAA,MAnCnCR,OAmCmC,GAAA,IAAA,CAnCnCA,OAmCmC;AAAA,MAAA,WAAA,GAAA,IAAA,CAlCnCS,MAkCmC;AAAA,MAlC3BR,UAkC2B,GAAA,WAAA,KAAA,KAAA,CAAA,GAlCd0D,eAAe,CAAClD,MAkCF,GAAA,WAAA;AAAA,MAjCnCP,OAiCmC,GAAA,IAAA,CAjCnCA,OAiCmC;AAAA,MAhCnCC,KAgCmC,GAAA,IAAA,CAhCnCA,KAgCmC;AAAA,MA/BnCC,MA+BmC,GAAA,IAAA,CA/BnCA,MA+BmC;AAAA,MA9B3B6F,aA8B2B,GAAA,IAAA,CA9BnCD,MA8BmC;AAAA,MAAA,WAAA,GAAA,IAAA,CA7BnCpC,MA6BmC;AAAA,MA7BnCA,MA6BmC,GAAA,WAAA,KAAA,KAAA,CAAA,GA7B1BD,eAAe,CAACC,MA6BU,GAAA,WAAA;AAAA,MAAA,WAAA,GAAA,IAAA,CA5BnCrD,MA4BmC;AAAA,MA5BnCA,MA4BmC,GAAA,WAAA,KAAA,KAAA,CAAA,GA5B1BoD,eAAe,CAACpD,MA4BU,GAAA,WAAA;AAAA,MAAA,cAAA,GAAA,IAAA,CA3BnCwB,SA2BmC;AAAA,MA3BnCA,SA2BmC,GAAA,cAAA,KAAA,KAAA,CAAA,GA3BvB4B,eAAe,CAAC5B,SA2BO,GAAA,cAAA;AAAA,MAAA,WAAA,GAAA,IAAA,CA1BnC1B,MA0BmC;AAAA,MA1BnCA,MA0BmC,GAAA,WAAA,KAAA,KAAA,CAAA,GA1B1BsD,eAAe,CAACtD,MA0BU,GAAA,WAAA;AAAA,MAAA,aAAA,GAAA,IAAA,CAzBnCC,QAyBmC;AAAA,MAzBnCA,QAyBmC,GAAA,aAAA,KAAA,KAAA,CAAA,GAzBxBqD,eAAe,CAACrD,QAyBQ,GAAA,aAAA;AAAA,MAAA,kBAAA,GAAA,IAAA,CAxBnC+C,aAwBmC;AAAA,MAxBnCA,aAwBmC,GAAA,kBAAA,KAAA,KAAA,CAAA,GAxBnBM,eAAe,CAACN,aAwBG,GAAA,kBAAA;AAAA,MAAA,gBAAA,GAAA,IAAA,CAvBnCJ,WAuBmC;AAAA,MAvBnCA,WAuBmC,GAAA,gBAAA,KAAA,KAAA,CAAA,GAvBrBU,eAAe,CAACV,WAuBK,GAAA,gBAAA;AAAA,MAAA,gBAAA,GAAA,IAAA,CAtBnCC,WAsBmC;AAAA,MAtBnCA,WAsBmC,GAAA,gBAAA,KAAA,KAAA,CAAA,GAtBrBS,eAAe,CAACT,WAsBK,GAAA,gBAAA;AAAA,MArBnCgD,WAqBmC,GAAA,IAAA,CArBnCA,WAqBmC;AAAA,MApBnCC,WAoBmC,GAAA,IAAA,CApBnCA,WAoBmC;AAAA,MAnBnCC,OAmBmC,GAAA,IAAA,CAnBnCA,OAmBmC;AAAA,MAlBnCC,SAkBmC,GAAA,IAAA,CAlBnCA,SAkBmC;AAAA,MAAA,eAAA,GAAA,IAAA,CAjBnClD,UAiBmC;AAAA,MAjBnCA,UAiBmC,GAAA,eAAA,KAAA,KAAA,CAAA,GAjBtBQ,eAAe,CAACR,UAiBM,GAAA,eAAA;AAAA,MAAA,aAAA,GAAA,IAAA,CAhBnCC,QAgBmC;AAAA,MAhBnCA,QAgBmC,GAAA,aAAA,KAAA,KAAA,CAAA,GAhBxBO,eAAe,CAACP,QAgBQ,GAAA,aAAA;AAAA,MAAA,gBAAA,GAAA,IAAA,CAfnC5B,WAemC;AAAA,MAfnCA,WAemC,GAAA,gBAAA,KAAA,KAAA,CAAA,GAfrBmC,eAAe,CAACnC,WAeK,GAAA,gBAAA;AAAA,MAAA,kBAAA,GAAA,IAAA,CAdnCQ,aAcmC;AAAA,MAdnCA,aAcmC,GAAA,kBAAA,KAAA,KAAA,CAAA,GAdnB2B,eAAe,CAAC3B,aAcG,GAAA,kBAAA;AAAA,MAAA,YAAA,GAAA,IAAA,CAbnC8B,OAamC;AAAA,MAbnCA,OAamC,GAAA,YAAA,KAAA,KAAA,CAAA,GAbzBH,eAAe,CAACG,OAaS,GAAA,YAAA;AAAA,MAAA,cAAA,GAAA,IAAA,CAZnCP,SAYmC;AAAA,MAZnCA,SAYmC,GAAA,cAAA,KAAA,KAAA,CAAA,GAZvBI,eAAe,CAACJ,SAYO,GAAA,cAAA;AAAA,MAXnCtB,YAWmC,GAAA,IAAA,CAXnCA,YAWmC;AAAA,MAVnCC,WAUmC,GAAA,IAAA,CAVnCA,WAUmC;AAAA,MATnCC,YASmC,GAAA,IAAA,CATnCA,YASmC;AAAA,MARnCC,OAQmC,GAAA,IAAA,CARnCA,OAQmC;AAAA,MAAA,YAAA,GAAA,IAAA,CAPnCoB,OAOmC;AAAA,MAPnCA,OAOmC,GAAA,YAAA,KAAA,KAAA,CAAA,GAPzBG,eAAe,CAACH,OAOS,GAAA,YAAA;AAAA,MAAA,YAAA,GAAA,IAAA,CANnCC,OAMmC;AAAA,MANnCA,OAMmC,GAAA,YAAA,KAAA,KAAA,CAAA,GANzBE,eAAe,CAACF,OAMS,GAAA,YAAA;AAAA,MAAA,YAAA,GAAA,IAAA,CALnCC,OAKmC;AAAA,MALnCA,OAKmC,GAAA,YAAA,KAAA,KAAA,CAAA,GALzBC,eAAe,CAACD,OAKS,GAAA,YAAA;AAAA,MAAA,SAAA,GAAA,IAAA,CAJnCG,IAImC;AAAA,MAJnCA,IAImC,GAAA,SAAA,KAAA,KAAA,CAAA,GAJ5BF,eAAe,CAACE,IAIY,GAAA,SAAA;AAAA,MAHnCyC,SAGmC,GAAA,IAAA,CAHnCA,SAGmC;AAAA,MAFnCC,cAEmC,GAAA,IAAA,CAFnCA,cAEmC;AAAA,MADnCC,eACmC,GAAA,IAAA,CADnCA,eACmC;;AAAA,MAAA,cAAA,GACkCK,aAAa,CAAA,KAAA,EAAA,MAAA,EAD/C,aAC+C,CAD/C;AAAA,MAC3Bb,MAD2B,GAAA,cAAA,CAAA,MAAA;AAAA,MACnBS,UADmB,GAAA,cAAA,CAAA,UAAA;AAAA,MACPC,WADO,GAAA,cAAA,CAAA,WAAA;AAAA,MACMC,UADN,GAAA,cAAA,CAAA,UAAA;AAAA,MACkBC,WADlB,GAAA,cAAA,CAAA,WAAA;;AAAA,MAAA,eAAA,GAOW9G,cAAc,CAAW;AACnEJ,IAAAA,IAAI,EAD+D,IAAA;AAEnEK,IAAAA,UAAU,EAFyD,UAAA;AAGnEC,IAAAA,OAAO,EAH4D,OAAA;AAInEC,IAAAA,UAAU,EAJyD,UAAA;AAKnEC,IAAAA,OAAO,EAL4D,OAAA;AAMnEC,IAAAA,KAAK,EAN8D,UAAA;AAOnEC,IAAAA,MAAM,EAP6D,WAAA;AAQnEC,IAAAA,MAAM,EAR6D,MAAA;AASnEC,IAAAA,QAAQ,EAT2D,QAAA;AAUnEC,IAAAA,MAAM,EAANA;AAVmE,GAAX,CAPzB;AAAA,MAO3BC,MAP2B,GAAA,eAAA,CAAA,MAAA;AAAA,MAOnBC,MAPmB,GAAA,eAAA,CAAA,MAAA;AAAA,MAOXQ,KAPW,GAAA,eAAA,CAAA,KAAA;AAAA,MAOJG,UAPI,GAAA,eAAA,CAAA,UAAA;;AAoBnC,MAAM0F,gBAAgB,GAAGjH,OAAO,CAC5B,YAAA;AAAA,WAAO;AACHW,MAAAA,MAAM,EADH,MAAA;AAEHC,MAAAA,MAAM,EAFH,MAAA;AAGHQ,MAAAA,KAAK,EAHF,KAAA;AAIH+E,MAAAA,MAAM,EAJH,MAAA;AAKHS,MAAAA,UAAU,EALP,UAAA;AAMHC,MAAAA,WAAW,EANR,WAAA;AAOHC,MAAAA,UAAU,EAPP,UAAA;AAQHC,MAAAA,WAAW,EAAXA;AARG,KAAP;AAD4B,GAAA,EAW5B,CAAA,MAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,UAAA,EAAA,WAAA,EAAA,UAAA,EAXJ,WAWI,CAX4B,CAAhC;AAcA,MAAMG,SAAgD,GAAG;AACrDC,IAAAA,IAAI,EADiD,IAAA;AAErDC,IAAAA,IAAI,EAFiD,IAAA;AAGrDhG,IAAAA,KAAK,EAHgD,IAAA;AAIrDwC,IAAAA,OAAO,EAJ8C,IAAA;AAKrDyD,IAAAA,IAAI,EALiD,IAAA;AAMrD1F,IAAAA,WAAW,EAN0C,IAAA;AAOrDkC,IAAAA,OAAO,EAAE;AAP4C,GAAzD;;AAUA,MAAIE,MAAM,CAANA,QAAAA,CAAJ,MAAIA,CAAJ,EAA6B;AACzBmD,IAAAA,SAAS,CAATA,IAAAA,GACI,GAAA,CAAA,IAAA,EAAA;AAEI,MAAA,KAAK,EAFT,UAAA;AAGI,MAAA,MAAM,EAHV,WAAA;AAII,MAAA,MAAM,EAAE9D,WAAW,GAAA,MAAA,GAJvB,IAAA;AAKI,MAAA,MAAM,EAAEC,WAAW,GAAA,MAAA,GALvB,IAAA;AAMI,MAAA,OAAO,EANX,WAAA;AAOI,MAAA,OAAO,EAAEiD;AAPb,KAAA,EADJY,MACI,CADJA;AAWH;;AAED,MAAInD,MAAM,CAANA,QAAAA,CAAJ,MAAIA,CAAJ,EAA6B;AACzBmD,IAAAA,SAAS,CAATA,IAAAA,GACI,GAAA,CAAA,IAAA,EAAA;AAEI,MAAA,MAAM,EAFV,MAAA;AAGI,MAAA,MAAM,EAHV,MAAA;AAII,MAAA,KAAK,EAJT,UAAA;AAKI,MAAA,MAAM,EALV,WAAA;AAMI,MAAA,GAAG,EANP,OAAA;AAOI,MAAA,KAAK,EAPT,SAAA;AAQI,MAAA,MAAM,EARV,UAAA;AASI,MAAA,IAAI,EAAE3D;AATV,KAAA,EADJ2D,MACI,CADJA;AAaH;;AAED,MAAInD,MAAM,CAANA,QAAAA,CAAJ,OAAIA,CAAJ,EAA8B;AAC1BmD,IAAAA,SAAS,CAATA,KAAAA,GACI,GAAA,CAAA,KAAA,EAAA;AAEI,MAAA,KAAK,EAFT,KAAA;AAGI,MAAA,aAAa,EAHjB,aAAA;AAII,MAAA,aAAa,EAJjB,aAAA;AAKI,MAAA,OAAO,EALX,OAAA;AAMI,MAAA,SAAS,EANb,SAAA;AAOI,MAAA,YAAY,EAPhB,YAAA;AAQI,MAAA,WAAW,EARf,WAAA;AASI,MAAA,YAAY,EAThB,YAAA;AAUI,MAAA,OAAO,EAAE3E;AAVb,KAAA,EADJ2E,OACI,CADJA;AAcH;;AAED,MAAInD,MAAM,CAANA,QAAAA,CAAJ,SAAIA,CAAJ,EAAgC;AAC5BmD,IAAAA,SAAS,CAATA,OAAAA,GACI,GAAA,CAAA,gBAAA,EAAA;AAEI,MAAA,OAAO,EAFX,OAAA;AAGI,MAAA,KAAK,EAHT,UAAA;AAII,MAAA,MAAM,EAJV,WAAA;AAKI,MAAA,MAAM,EALV,MAAA;AAMI,MAAA,MAAM,EAAEtG;AANZ,KAAA,EADJsG,SACI,CADJA;AAUH;;AAED,MAAInD,MAAM,CAANA,QAAAA,CAAAA,MAAAA,KAAAA,aAAAA,IAAJ,OAAA,EAAyD;AACrDmD,IAAAA,SAAS,CAATA,IAAAA,GACI,GAAA,CAAA,IAAA,EAAA;AAEI,MAAA,KAAK,EAFT,KAAA;AAGI,MAAA,KAAK,EAHT,UAAA;AAII,MAAA,MAAM,EAJV,WAAA;AAKI,MAAA,YAAY,EALhB,YAAA;AAMI,MAAA,WAAW,EANf,WAAA;AAOI,MAAA,YAAY,EAPhB,YAAA;AAQI,MAAA,OAAO,EARX,OAAA;AASI,MAAA,OAAO,EATX,OAAA;AAUI,MAAA,KAAK,EAAExD;AAVX,KAAA,EADJwD,MACI,CADJA;AAcH;;AAED,MAAInD,MAAM,CAANA,QAAAA,CAAJ,aAAIA,CAAJ,EAAoC;AAChCmD,IAAAA,SAAS,CAATA,WAAAA,GACI,GAAA,CAAA,sBAAA,EAAA;AAEI,MAAA,KAAK,EAFT,KAAA;AAGI,MAAA,WAAW,EAAEvF;AAHjB,KAAA,EADJuF,aACI,CADJA;AAOH;;AAED,MAAInD,MAAM,CAANA,QAAAA,CAAJ,SAAIA,CAAJ,EAAgC;AAC5BmD,IAAAA,SAAS,CAATA,OAAAA,GAAoB,OAAO,CAAP,GAAA,CAAY,UAAA,MAAA,EAAA,CAAA,EAAA;AAAA,aAC5B,GAAA,CAAA,YAAA,EAAA,cAAA,CAAA,cAAA,CAAA,EAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA;AAGI,QAAA,cAAc,EAHlB,UAAA;AAII,QAAA,eAAe,EAJnB,WAAA;AAKI,QAAA,IAAI,EAAE3F;AALV,OAAA,CAAA,EAD4B,CAC5B,CAD4B;AAAhC2F,KAAoB,CAApBA;AASH;;AAED,SACI,GAAA,CAAA,UAAA,EAAA;AACI,IAAA,KAAK,EADT,UAAA;AAEI,IAAA,MAAM,EAFV,WAAA;AAGI,IAAA,MAAM,EAHV,MAAA;AAII,IAAA,IAAI,EAJR,IAAA;AAKI,IAAA,SAAS,EALb,SAAA;AAMI,IAAA,cAAc,EANlB,cAAA;AAOI,IAAA,eAAe,EAPnB,eAAA;AAAA,IAAA,QAAA,EASK,MAAM,CAAN,GAAA,CAAW,UAAA,KAAA,EAAA,CAAA,EAAc;AACtB,UAAI,OAAA,KAAA,KAAA,QAAA,IAA6BA,SAAS,CAATA,KAAS,CAATA,KAAjC,SAAA,EAAiE;AAC7D,eAAOA,SAAS,CAAhB,KAAgB,CAAhB;AACH;;AAED,UAAI,OAAA,KAAA,KAAJ,UAAA,EAAiC;AAC7B,eAAO,GAAA,CAAA,UAAA,EAAA;AAAA,UAAA,QAAA,EAAmBnB,aAAa,CAAA,KAAA,EAAA,gBAAA;AAAhC,SAAA,EAAP,CAAO,CAAP;AACH;;AAED,YAAM,IAAA,KAAA,CAAA,kBAAA,MAAA,CAAA,KAAA,EAAN,GAAM,CAAA,CAAN;AATH,KAAA;AATL,GAAA,CADJ;AArLJ,CAAA;;IA8MauB,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAAA;AAAA,MAAA,mBAAA,GAAA,KAAA,CAAA,aAAA;AAAA,MACvBnF,aADuB,GAAA,mBAAA,KAAA,KAAA,CAAA,GACP2B,eAAe,CADR,aAAA,GAAA,mBAAA;AAAA,MAAA,aAAA,GAAA,KAAA,CAAA,OAAA;AAAA,MAEvBI,OAFuB,GAAA,aAAA,KAAA,KAAA,CAAA,GAEbJ,eAAe,CAFF,OAAA,GAAA,aAAA;AAAA,MAAA,kBAAA,GAAA,KAAA,CAAA,YAAA;AAAA,MAGvBK,YAHuB,GAAA,kBAAA,KAAA,KAAA,CAAA,GAGRL,eAAe,CAHP,YAAA,GAAA,kBAAA;AAAA,MAIvByD,KAJuB,GAAA,KAAA,CAAA,KAAA;AAAA,MAKvBC,aALuB,GAAA,KAAA,CAAA,aAAA;AAAA,MAMpBC,UANoB,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,eAAA,EAAA,SAAA,EAAA,cAAA,EAAA,OAAA,EAAA,eAAA,CAAA,CAAA;;AAAA,SAQvB,GAAA,CAAA,SAAA,EAAA;AAEQvD,IAAAA,OAAO,EAFf,OAAA;AAGQ/B,IAAAA,aAAa,EAHrB,aAAA;AAIQgC,IAAAA,YAAY,EAJpB,YAAA;AAKQqD,IAAAA,aAAa,EALrB,aAAA;AAMQD,IAAAA,KAAK,EANb,KAAA;AAAA,IAAA,QAAA,EASI,GAAA,CAAA,gBAAA,EAAA,cAAA,CAAA;AAA4B,MAAA,aAAa,EAAEpF;AAA3C,KAAA,EAAA,UAAA,CAAA;AATJ,GAAA,CARuB;AAAA,C;;IC1NduF,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,KAAA,EAAA;AAAA,SAGjC,GAAA,CAAA,iBAAA,EAAA;AAAA,IAAA,QAAA,EACK,SAAA,QAAA,CAAA,IAAA,EAAA;AAAA,UAAGpH,KAAH,GAAA,IAAA,CAAA,KAAA;AAAA,UAAUC,MAAV,GAAA,IAAA,CAAA,MAAA;AAAA,aAAuB,GAAA,CAAA,WAAA,EAAA,cAAA,CAAA;AAAuB,QAAA,KAAK,EAA5B,KAAA;AAAqC,QAAA,MAAM,EAAEA;AAA7C,OAAA,EAAvB,KAAuB,CAAA,CAAvB;AAAA;AADL,GAAA,CAHiC;AAAA,C;;ACJtB,SAAS,eAAT,CAAyB,GAAzB,EAA8B;AAC3C,MAAI,KAAK,CAAC,OAAN,CAAc,GAAd,CAAJ,EAAwB,OAAO,GAAP;AAC1B;;ACFe,SAAS,qBAAT,CAA+B,GAA/B,EAAoC,CAApC,EAAuC;AACpD,MAAI,OAAO,MAAP,KAAkB,WAAlB,IAAiC,EAAE,MAAM,CAAC,QAAP,IAAmB,MAAM,CAAC,GAAD,CAA3B,CAArC,EAAwE;AACxE,MAAI,IAAI,GAAG,EAAX;AACA,MAAI,EAAE,GAAG,IAAT;AACA,MAAI,EAAE,GAAG,KAAT;AACA,MAAI,EAAE,GAAG,SAAT;;AAEA,MAAI;AACF,SAAK,IAAI,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,QAAR,CAAH,EAAT,EAAiC,EAAtC,EAA0C,EAAE,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAH,EAAN,EAAiB,IAAxB,CAA1C,EAAyE,EAAE,GAAG,IAA9E,EAAoF;AAClF,MAAA,IAAI,CAAC,IAAL,CAAU,EAAE,CAAC,KAAb;;AAEA,UAAI,CAAC,IAAI,IAAI,CAAC,MAAL,KAAgB,CAAzB,EAA4B;AAC7B;AACF,GAND,CAME,OAAO,GAAP,EAAY;AACZ,IAAA,EAAE,GAAG,IAAL;AACA,IAAA,EAAE,GAAG,GAAL;AACD,GATD,SASU;AACR,QAAI;AACF,UAAI,CAAC,EAAD,IAAO,EAAE,CAAC,QAAD,CAAF,IAAgB,IAA3B,EAAiC,EAAE,CAAC,QAAD,CAAF;AAClC,KAFD,SAEU;AACR,UAAI,EAAJ,EAAQ,MAAM,EAAN;AACT;AACF;;AAED,SAAO,IAAP;AACF;;ACzBe,SAAS,iBAAT,CAA2B,GAA3B,EAAgC,GAAhC,EAAqC;AAClD,MAAI,GAAG,IAAI,IAAP,IAAe,GAAG,GAAG,GAAG,CAAC,MAA7B,EAAqC,GAAG,GAAG,GAAG,CAAC,MAAV;;AAErC,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,IAAI,GAAG,IAAI,KAAJ,CAAU,GAAV,CAAvB,EAAuC,CAAC,GAAG,GAA3C,EAAgD,CAAC,EAAjD,EAAqD;AACnD,IAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAG,CAAC,CAAD,CAAb;AACD;;AAED,SAAO,IAAP;AACF;;ACPe,SAAS,2BAAT,CAAqC,CAArC,EAAwC,MAAxC,EAAgD;AAC7D,MAAI,CAAC,CAAL,EAAQ;AACR,MAAI,OAAO,CAAP,KAAa,QAAjB,EAA2B,OAAOoH,iBAAgB,CAAC,CAAD,EAAI,MAAJ,CAAvB;AAC3B,MAAI,CAAC,GAAG,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,CAA/B,EAAkC,KAAlC,CAAwC,CAAxC,EAA2C,CAAC,CAA5C,CAAR;AACA,MAAI,CAAC,KAAK,QAAN,IAAkB,CAAC,CAAC,WAAxB,EAAqC,CAAC,GAAG,CAAC,CAAC,WAAF,CAAc,IAAlB;AACrC,MAAI,CAAC,KAAK,KAAN,IAAe,CAAC,KAAK,KAAzB,EAAgC,OAAO,KAAK,CAAC,IAAN,CAAW,CAAX,CAAP;AAChC,MAAI,CAAC,KAAK,WAAN,IAAqB,2CAA2C,IAA3C,CAAgD,CAAhD,CAAzB,EAA6E,OAAOA,iBAAgB,CAAC,CAAD,EAAI,MAAJ,CAAvB;AAC/E;;ACRe,SAAS,gBAAT,GAA4B;AACzC,QAAM,IAAI,SAAJ,CAAc,2IAAd,CAAN;AACF;;ACEe,SAAS,cAAT,CAAwB,GAAxB,EAA6B,CAA7B,EAAgC;AAC7C,SAAOC,eAAc,CAAC,GAAD,CAAdA,IAAuBC,qBAAoB,CAAC,GAAD,EAAM,CAAN,CAA3CD,IAAuDE,2BAA0B,CAAC,GAAD,EAAM,CAAN,CAAjFF,IAA6FG,gBAAe,EAAnH;AACF;;ACUA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,IAAA,EAgCc;AAAA,MA/BzCnI,IA+ByC,GAAA,IAAA,CA/BzCA,IA+ByC;AAAA,MAAA,WAAA,GAAA,IAAA,CA9BzCc,MA8ByC;AAAA,MA9BjCT,UA8BiC,GAAA,WAAA,KAAA,KAAA,CAAA,GA9BpBkE,kBAAkB,CAACzD,MA8BC,GAAA,WAAA;AAAA,MA7BzCR,OA6ByC,GAAA,IAAA,CA7BzCA,OA6ByC;AAAA,MAAA,WAAA,GAAA,IAAA,CA5BzCS,MA4ByC;AAAA,MA5BjCR,UA4BiC,GAAA,WAAA,KAAA,KAAA,CAAA,GA5BpBgE,kBAAkB,CAACxD,MA4BC,GAAA,WAAA;AAAA,MA3BzCP,OA2ByC,GAAA,IAAA,CA3BzCA,OA2ByC;AAAA,MA1BzCC,KA0ByC,GAAA,IAAA,CA1BzCA,KA0ByC;AAAA,MAzBzCC,MAyByC,GAAA,IAAA,CAzBzCA,MAyByC;AAAA,MAxBjC6F,aAwBiC,GAAA,IAAA,CAxBzCD,MAwByC;AAAA,MAAA,eAAA,GAAA,IAAA,CAvBzC9B,UAuByC;AAAA,MAvBzCA,UAuByC,GAAA,eAAA,KAAA,KAAA,CAAA,GAvB5BD,kBAAkB,CAACC,UAuBS,GAAA,eAAA;AAAA,MAAA,WAAA,GAAA,IAAA,CAtBzCN,MAsByC;AAAA,MAtBzCA,MAsByC,GAAA,WAAA,KAAA,KAAA,CAAA,GAtBhCK,kBAAkB,CAACL,MAsBa,GAAA,WAAA;AAAA,MAAA,WAAA,GAAA,IAAA,CArBzCrD,MAqByC;AAAA,MArBzCA,MAqByC,GAAA,WAAA,KAAA,KAAA,CAAA,GArBhC0D,kBAAkB,CAAC1D,MAqBa,GAAA,WAAA;AAAA,MAAA,WAAA,GAAA,IAAA,CApBzCF,MAoByC;AAAA,MApBzCA,MAoByC,GAAA,WAAA,KAAA,KAAA,CAAA,GApBhCsD,eAAe,CAACtD,MAoBgB,GAAA,WAAA;AAAA,MAAA,aAAA,GAAA,IAAA,CAnBzCC,QAmByC;AAAA,MAnBzCA,QAmByC,GAAA,aAAA,KAAA,KAAA,CAAA,GAnB9B2D,kBAAkB,CAAC3D,QAmBW,GAAA,aAAA;AAAA,MAAA,eAAA,GAAA,IAAA,CAlBzC8D,UAkByC;AAAA,MAlBzCA,UAkByC,GAAA,eAAA,KAAA,KAAA,CAAA,GAlB5BH,kBAAkB,CAACG,UAkBS,GAAA,eAAA;AAAA,MAAA,gBAAA,GAAA,IAAA,CAjBzCnB,WAiByC;AAAA,MAjBzCA,WAiByC,GAAA,gBAAA,KAAA,KAAA,CAAA,GAjB3BgB,kBAAkB,CAAChB,WAiBQ,GAAA,gBAAA;AAAA,MAhBzCiD,WAgByC,GAAA,IAAA,CAhBzCA,WAgByC;AAAA,MAAA,gBAAA,GAAA,IAAA,CAfzChD,WAeyC;AAAA,MAfzCA,WAeyC,GAAA,gBAAA,KAAA,KAAA,CAAA,GAf3Be,kBAAkB,CAACf,WAeQ,GAAA,gBAAA;AAAA,MAdzCiD,WAcyC,GAAA,IAAA,CAdzCA,WAcyC;AAAA,MAbzCC,OAayC,GAAA,IAAA,CAbzCA,OAayC;AAAA,MAZzCC,SAYyC,GAAA,IAAA,CAZzCA,SAYyC;AAAA,MAAA,eAAA,GAAA,IAAA,CAXzClD,UAWyC;AAAA,MAXzCA,UAWyC,GAAA,eAAA,KAAA,KAAA,CAAA,GAX5Bc,kBAAkB,CAACd,UAWS,GAAA,eAAA;AAAA,MAAA,aAAA,GAAA,IAAA,CAVzCC,QAUyC;AAAA,MAVzCA,QAUyC,GAAA,aAAA,KAAA,KAAA,CAAA,GAV9Ba,kBAAkB,CAACb,QAUW,GAAA,aAAA;AAAA,MAAA,gBAAA,GAAA,IAAA,CATzC5B,WASyC;AAAA,MATzCA,WASyC,GAAA,gBAAA,KAAA,KAAA,CAAA,GAT3ByC,kBAAkB,CAACzC,WASQ,GAAA,gBAAA;AAAA,MAAA,kBAAA,GAAA,IAAA,CARzCQ,aAQyC;AAAA,MARzCA,aAQyC,GAAA,kBAAA,KAAA,KAAA,CAAA,GARzBiC,kBAAkB,CAACjC,aAQM,GAAA,kBAAA;AAAA,MAAA,cAAA,GAAA,IAAA,CAPzCuB,SAOyC;AAAA,MAPzCA,SAOyC,GAAA,cAAA,KAAA,KAAA,CAAA,GAP7BU,kBAAkB,CAACV,SAOU,GAAA,cAAA;AAAA,MANzCtB,YAMyC,GAAA,IAAA,CANzCA,YAMyC;AAAA,MALzCC,WAKyC,GAAA,IAAA,CALzCA,WAKyC;AAAA,MAJzCC,YAIyC,GAAA,IAAA,CAJzCA,YAIyC;AAAA,MAHzCC,OAGyC,GAAA,IAAA,CAHzCA,OAGyC;AAAA,MAAA,YAAA,GAAA,IAAA,CAFzCoB,OAEyC;AAAA,MAFzCA,OAEyC,GAAA,YAAA,KAAA,KAAA,CAAA,GAF/BS,kBAAkB,CAACT,OAEY,GAAA,YAAA;AAAA,MAAA,YAAA,GAAA,IAAA,CADzCE,OACyC;AAAA,MADzCA,OACyC,GAAA,YAAA,KAAA,KAAA,CAAA,GAD/BO,kBAAkB,CAACP,OACY,GAAA,YAAA;AACzC,MAAMoE,QAAQ,GAAGC,MAAM,CAAvB,IAAuB,CAAvB;AACA,MAAMX,KAAK,GAAGY,QAAd,EAAA;;AAFyC,MAAA,SAAA,GAGHG,QAAQ,CAHL,IAGK,CAHL;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAGlCF,WAHkC,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAGrBC,cAHqB,GAAA,UAAA,CAAA,CAAA,CAAA;;AAAA,MAAA,cAAA,GAK4BrB,aAAa,CAAA,KAAA,EAAA,MAAA,EALzC,aAKyC,CALzC;AAAA,MAKjCb,MALiC,GAAA,cAAA,CAAA,MAAA;AAAA,MAKzBS,UALyB,GAAA,cAAA,CAAA,UAAA;AAAA,MAKbC,WALa,GAAA,cAAA,CAAA,WAAA;AAAA,MAKAC,UALA,GAAA,cAAA,CAAA,UAAA;AAAA,MAKYC,WALZ,GAAA,cAAA,CAAA,WAAA;;AAAA,MAAA,eAAA,GAWK9G,cAAc,CAAW;AACnEJ,IAAAA,IAAI,EAD+D,IAAA;AAEnEK,IAAAA,UAAU,EAFyD,UAAA;AAGnEC,IAAAA,OAAO,EAH4D,OAAA;AAInEC,IAAAA,UAAU,EAJyD,UAAA;AAKnEC,IAAAA,OAAO,EAL4D,OAAA;AAMnEC,IAAAA,KAAK,EAN8D,UAAA;AAOnEC,IAAAA,MAAM,EAP6D,WAAA;AAQnEC,IAAAA,MAAM,EAR6D,MAAA;AASnEC,IAAAA,QAAQ,EAT2D,QAAA;AAUnEC,IAAAA,MAAM,EAANA;AAVmE,GAAX,CAXnB;AAAA,MAWjCC,MAXiC,GAAA,eAAA,CAAA,MAAA;AAAA,MAWzBC,MAXyB,GAAA,eAAA,CAAA,MAAA;AAAA,MAWjBQ,KAXiB,GAAA,eAAA,CAAA,KAAA;AAAA,MAWVG,UAXU,GAAA,eAAA,CAAA,UAAA;;AAwBzC,MAAMoD,gBAAgB,GAAGlD,yBAAyB,CAAA,KAAA,EAAlD,WAAkD,CAAlD;;AAxByC,MAAA,eAAA,GA0BXgH,cAAc,CAAC;AACzCzJ,IAAAA,MAAM,EADmC,KAAA;AAEzCsB,IAAAA,KAAK,EAFoC,UAAA;AAGzCC,IAAAA,MAAM,EAHmC,WAAA;AAIzC0F,IAAAA,KAAK,EAAEvC;AAJkC,GAAD,CA1BH;AAAA,MA0BjC6E,QA1BiC,GAAA,eAAA,CAAA,QAAA;AAAA,MA0BvBC,OA1BuB,GAAA,eAAA,CAAA,OAAA;;AAiCzC,MAAMvB,gBAAgB,GAAGjH,OAAO,CAC5B,YAAA;AAAA,WAAO;AACHW,MAAAA,MAAM,EADH,MAAA;AAEHC,MAAAA,MAAM,EAFH,MAAA;AAGHQ,MAAAA,KAAK,EAHF,KAAA;AAIH+E,MAAAA,MAAM,EAJH,MAAA;AAKHS,MAAAA,UAAU,EALP,UAAA;AAMHC,MAAAA,WAAW,EANR,WAAA;AAOHC,MAAAA,UAAU,EAPP,UAAA;AAQHC,MAAAA,WAAW,EAAXA;AARG,KAAP;AAD4B,GAAA,EAW5B,CAAA,MAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,UAAA,EAAA,WAAA,EAAA,UAAA,EAXJ,WAWI,CAX4B,CAAhC;AAcA2B,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI,CAACT,QAAQ,CAAb,OAAA,EAAuB;AAEvBA,IAAAA,QAAQ,CAARA,OAAAA,CAAAA,KAAAA,GAAyBnB,UAAU,GAAnCmB,UAAAA;AACAA,IAAAA,QAAQ,CAARA,OAAAA,CAAAA,MAAAA,GAA0BlB,WAAW,GAArCkB,UAAAA;AAEA,QAAMzD,GAAG,GAAGyD,QAAQ,CAARA,OAAAA,CAAAA,UAAAA,CAAZ,IAAYA,CAAZ;AAEAzD,IAAAA,GAAG,CAAHA,KAAAA,CAAAA,UAAAA,EAAAA,UAAAA;AAEAA,IAAAA,GAAG,CAAHA,SAAAA,GAAgB+C,KAAK,CAArB/C,UAAAA;AACAA,IAAAA,GAAG,CAAHA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,UAAAA,EAAAA,WAAAA;AACAA,IAAAA,GAAG,CAAHA,SAAAA,CAAc2B,MAAM,CAApB3B,IAAAA,EAA2B2B,MAAM,CAAjC3B,GAAAA;AAEAT,IAAAA,MAAM,CAANA,OAAAA,CAAe,UAAA,KAAA,EAAS;AACpB,UAAI4E,KAAK,KAAT,MAAA,EAAsB;AAClBnE,QAAAA,GAAG,CAAHA,SAAAA,GAAgB+C,KAAK,CAALA,IAAAA,CAAAA,IAAAA,CAAhB/C,WAAAA;AACAA,QAAAA,GAAG,CAAHA,WAAAA,GAAkB+C,KAAK,CAALA,IAAAA,CAAAA,IAAAA,CAAlB/C,MAAAA;AAEApB,QAAAA,WAAW,IACPwF,uBAAuB,CAAA,GAAA,EAAqB;AACxCtI,UAAAA,KAAK,EADmC,UAAA;AAExCC,UAAAA,MAAM,EAFkC,WAAA;AAGxCsI,UAAAA,KAAK,EAHmC,MAAA;AAIxCC,UAAAA,IAAI,EAJoC,GAAA;AAKxCC,UAAAA,MAAM,EAAE1C;AALgC,SAArB,CAD3BjD;AASAC,QAAAA,WAAW,IACPuF,uBAAuB,CAAA,GAAA,EAAqB;AACxCtI,UAAAA,KAAK,EADmC,UAAA;AAExCC,UAAAA,MAAM,EAFkC,WAAA;AAGxCsI,UAAAA,KAAK,EAHmC,MAAA;AAIxCC,UAAAA,IAAI,EAJoC,GAAA;AAKxCC,UAAAA,MAAM,EAAEzC;AALgC,SAArB,CAD3BjD;AAbJ,OAAA,MAqBO,IAAIsF,KAAK,KAAT,aAAA,EAA6B;AAChCK,QAAAA,yBAAyB,CAAA,GAAA,EAAqC;AAC1DrH,UAAAA,WAAW,EAD+C,gBAAA;AAE1D4F,UAAAA,KAAK,EAALA;AAF0D,SAArC,CAAzByB;AADG,OAAA,MAKA,IAAIL,KAAK,KAAT,MAAA,EAAsB;AACzBM,QAAAA,kBAAkB,CAAA,GAAA,EAAoC;AAClDtI,UAAAA,MAAM,EAD4C,MAAA;AAElDC,UAAAA,MAAM,EAF4C,MAAA;AAGlDN,UAAAA,KAAK,EAH6C,UAAA;AAIlDC,UAAAA,MAAM,EAJ4C,WAAA;AAKlD2I,UAAAA,GAAG,EAL+C,OAAA;AAMlDC,UAAAA,KAAK,EAN6C,SAAA;AAOlDC,UAAAA,MAAM,EAP4C,UAAA;AAQlDC,UAAAA,IAAI,EAR8C,QAAA;AASlD9B,UAAAA,KAAK,EAALA;AATkD,SAApC,CAAlB0B;AADG,OAAA,MAYA,IAAIN,KAAK,KAAT,OAAA,EAAuB;AAC1BvH,QAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,IAAA,EAAQ;AAClBmD,UAAAA,UAAU,CAAA,GAAA,EAAVA,IAAU,CAAVA;AADJnD,SAAAA;AADG,OAAA,MAIA,IAAIuH,KAAK,KAAT,MAAA,EAAsB;AACzB,YAAIjF,SAAS,KAAb,IAAA,EAAwB;AACpB4F,UAAAA,qBAAqB,CAAA,GAAA,EAArBA,OAAqB,CAArBA;;AACA,cAAA,WAAA,EAAiB;AACbC,YAAAA,yBAAyB,CAAA,GAAA,EAAA,OAAA,EAAgBnB,WAAW,CAApDmB,KAAyB,CAAzBA;AACH;AACJ;AANE,OAAA,MAOA,IAAIZ,KAAK,KAAT,SAAA,EAAyB;AAC5B9E,QAAAA,OAAO,CAAPA,OAAAA,CAAgB,UAAA,MAAA,EAAU;AACtB2F,UAAAA,oBAAoB,CAAA,GAAA,EAAA,cAAA,CAAA,cAAA,CAAA,EAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA;AAEhB3J,YAAAA,IAAI,EAFY,UAAA;AAGhB4J,YAAAA,cAAc,EAHE,UAAA;AAIhBC,YAAAA,eAAe,EAJC,WAAA;AAKhBnC,YAAAA,KAAK,EAALA;AALgB,WAAA,CAAA,CAApBiC;AADJ3F,SAAAA;AADG,OAAA,MAUA,IAAI,OAAA,KAAA,KAAJ,UAAA,EAAiC;AACpC8E,QAAAA,KAAK,CAAA,GAAA,EAALA,gBAAK,CAALA;AADG,OAAA,MAEA;AACH,cAAM,IAAA,KAAA,CAAA,kBAAA,MAAA,CAAN,KAAM,CAAA,CAAN;AACH;AAhEL5E,KAAAA;AAdK,GAAA,EAgFN,CAAA,QAAA,EAAA,UAAA,EAAA,WAAA,EAAA,UAAA,EAAA,WAAA,EAMCoC,MAAM,CANP,GAAA,EAOCA,MAAM,CAPP,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA,MAAA,EAAA,gBAAA,EAAA,KAAA,EAAA,MAAA,EAAA,MAAA,EAAA,KAAA,EAAA,WAAA,EAAA,WAAA,EAAA,OAAA,EAAA,SAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,UAAA,EAAA,SAAA,EAAA,OAAA,EAhFHuC,WAgFG,CAhFM,CAATA;;AA/CyC,MAAA,WAAA,GA4JK5C,UA5JL,EAAA;AAAA,MA4JjCF,oBA5JiC,GAAA,WAAA,CAAA,oBAAA;AAAA,MA4JXC,WA5JW,GAAA,WAAA,CAAA,WAAA;;AA8JzC,MAAM8D,qBAAqB,GAAGlH,WAAW,CACrC,UAAA,KAAA,EAAS;AAAA,QAAA,kBAAA,GACUmH,iBAAiB,CAAC3B,QAAQ,CAAT,OAAA,EAD3B,KAC2B,CAD3B;AAAA,QAAA,mBAAA,GAAA,cAAA,CAAA,kBAAA,EAAA,CAAA,CAAA;AAAA,QACE3I,CADF,GAAA,mBAAA,CAAA,CAAA,CAAA;AAAA,QACKI,CADL,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAEL,QAAI,CAACmK,cAAc,CAAC1D,MAAM,CAAP,IAAA,EAAcA,MAAM,CAApB,GAAA,EAAA,UAAA,EAAA,WAAA,EAAA,CAAA,EAAnB,CAAmB,CAAnB,EAA6E,OAAA,IAAA;AAE7E,QAAM2D,SAAS,GAAGvB,QAAQ,CAARA,IAAAA,CAAcjJ,CAAC,GAAG6G,MAAM,CAAxBoC,IAAAA,EAA+B7I,CAAC,GAAGyG,MAAM,CAA3D,GAAkBoC,CAAlB;AACA,WAAOnH,KAAK,CAAZ,SAAY,CAAZ;AANiC,GAAA,EAQrC,CAAA,QAAA,EAAA,MAAA,EAAA,UAAA,EAAA,WAAA,EARJ,QAQI,CARqC,CAAzC;AAWA,MAAM2I,gBAAgB,GAAGtH,WAAW,CAChC,UAAA,KAAA,EAAS;AACL,QAAMZ,IAAI,GAAG8H,qBAAqB,CAAlC,KAAkC,CAAlC;AACAtB,IAAAA,cAAc,CAAdA,IAAc,CAAdA;;AAEA,QAAA,IAAA,EAAU;AACNzC,MAAAA,oBAAoB,CAACG,aAAa,CAAA,OAAA,EAAU;AAAElE,QAAAA,IAAI,EAAJA;AAAF,OAAV,CAAd,EAApB+D,KAAoB,CAApBA;;AACA,UAAIwC,WAAW,IAAIA,WAAW,CAAXA,EAAAA,KAAmBvG,IAAI,CAA1C,EAAA,EAA+C;AAC3CS,QAAAA,YAAY,IAAIA,YAAY,CAAA,WAAA,EAA5BA,KAA4B,CAA5BA;AACAF,QAAAA,YAAY,IAAIA,YAAY,CAAA,IAAA,EAA5BA,KAA4B,CAA5BA;AACH;;AACD,UAAI,CAAJ,WAAA,EAAkB;AACdA,QAAAA,YAAY,IAAIA,YAAY,CAAA,IAAA,EAA5BA,KAA4B,CAA5BA;AACH;;AACDC,MAAAA,WAAW,IAAIA,WAAW,CAAA,IAAA,EAA1BA,KAA0B,CAA1BA;AATJ,KAAA,MAUO;AACHwD,MAAAA,WAAW;AACXuC,MAAAA,WAAW,IAAXA,YAAAA,IAA+B9F,YAAY,CAAA,WAAA,EAA3C8F,KAA2C,CAA3CA;AACH;AAlB2B,GAAA,EAoBhC,CAAA,qBAAA,EAAA,WAAA,EAAA,cAAA,EAAA,oBAAA,EAAA,WAAA,EAAA,OAAA,EAAA,YAAA,EAAA,WAAA,EApBJ,YAoBI,CApBgC,CAApC;AAiCA,MAAMzF,gBAAgB,GAAGF,WAAW,CAChC,UAAA,KAAA,EAAS;AACLoD,IAAAA,WAAW;AACXwC,IAAAA,cAAc,CAAdA,IAAc,CAAdA;AACAD,IAAAA,WAAW,IAAXA,YAAAA,IAA+B9F,YAAY,CAAA,WAAA,EAA3C8F,KAA2C,CAA3CA;AAJ4B,GAAA,EAMhC,CAAA,WAAA,EAAA,WAAA,EAAA,cAAA,EANJ,YAMI,CANgC,CAApC;AASA,MAAMxF,WAAW,GAAGH,WAAW,CAC3B,UAAA,KAAA,EAAS;AACL,QAAA,OAAA,EAAa;AACT,UAAMZ,IAAI,GAAG8H,qBAAqB,CAAlC,KAAkC,CAAlC;AACA9H,MAAAA,IAAI,IAAIU,OAAO,CAAA,IAAA,EAAfV,KAAe,CAAfA;AACH;AALsB,GAAA,EAO3B,CAAA,qBAAA,EAPJ,OAOI,CAP2B,CAA/B;AAUA,SACI,GAAA,CAAA,QAAA,EAAA;AACI,IAAA,GAAG,EADP,QAAA;AAEI,IAAA,KAAK,EAAEiF,UAAU,GAFrB,UAAA;AAGI,IAAA,MAAM,EAAEC,WAAW,GAHvB,UAAA;AAII,IAAA,KAAK,EAAE;AACHzG,MAAAA,KAAK,EADF,UAAA;AAEHC,MAAAA,MAAM,EAFH,WAAA;AAGHyJ,MAAAA,MAAM,EAAE7H,aAAa,GAAA,MAAA,GAAY;AAH9B,KAJX;AASI,IAAA,YAAY,EAAEA,aAAa,GAAA,gBAAA,GAT/B,SAAA;AAUI,IAAA,WAAW,EAAEA,aAAa,GAAA,gBAAA,GAV9B,SAAA;AAWI,IAAA,YAAY,EAAEA,aAAa,GAAA,gBAAA,GAX/B,SAAA;AAYI,IAAA,OAAO,EAAEA,aAAa,GAAA,WAAA,GAAiBW;AAZ3C,GAAA,CADJ;AA7PJ,CAAA;;IA+QamH,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,KAAA,EAAA;AAAA,MAC7B9H,aAD6B,GAAA,KAAA,CAAA,aAAA;AAAA,MAE7BqF,aAF6B,GAAA,KAAA,CAAA,aAAA;AAAA,MAG7BD,KAH6B,GAAA,KAAA,CAAA,KAAA;AAAA,MAI1B2C,KAJ0B,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,eAAA,EAAA,eAAA,EAAA,OAAA,CAAA,CAAA;;AAAA,SAM7B,GAAA,CAAA,SAAA,EAAA;AAAiB/H,IAAAA,aAAa,EAA9B,aAAA;AAAgCqF,IAAAA,aAAa,EAA7C,aAAA;AAA+CD,IAAAA,KAAK,EAApD,KAAA;AAAwD,IAAA,OAAO,EAA/D,KAAA;AAAA,IAAA,QAAA,EACI3C,GAAAA,CAAAA,sBAAAA,EAAAA,cAAAA,CAAAA,EAAAA,EAAAA,KAAAA,CAAAA;AADJ,GAAA,CAN6B;AAAA,C;;IC3RpBuF,2BAA2B,GAAG,SAA9BA,2BAA8B,CAAA,KAAA,EAAA;AAAA,SAGvC,GAAA,CAAA,iBAAA,EAAA;AAAA,IAAA,QAAA,EACK,SAAA,QAAA,CAAA,IAAA,EAAA;AAAA,UAAG7J,KAAH,GAAA,IAAA,CAAA,KAAA;AAAA,UAAUC,MAAV,GAAA,IAAA,CAAA,MAAA;AAAA,aACG,GAAA,CAAA,iBAAA,EAAA,cAAA,CAAA;AAA6B,QAAA,KAAK,EAAlC,KAAA;AAA2C,QAAA,MAAM,EAAEA;AAAnD,OAAA,EADH,KACG,CAAA,CADH;AAAA;AADL,GAAA,CAHuC;AAAA,C","sourcesContent":["export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport { scaleLinear } from 'd3-scale'\nimport { ComputedSerie } from '@nivo/scales'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n    ScatterPlotNodeDynamicSizeSpec,\n} from './types'\n\nconst isDynamicSizeSpec = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n): size is ScatterPlotNodeDynamicSizeSpec => isPlainObject(size)\n\nexport const getNodeSizeGenerator = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => {\n    if (typeof size === 'function') return size\n    if (isNumber(size)) return () => size\n    if (isDynamicSizeSpec<RawDatum>(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'symbolSize is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (datum: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>) =>\n            sizeScale(get(datum, size.key))\n    }\n\n    throw new Error('nodeSize is invalid, it should be either a function, a number or an object')\n}\n\nexport const computePoints = <RawDatum extends ScatterPlotDatum>({\n    series,\n    formatX,\n    formatY,\n    getNodeId,\n}: {\n    series: ComputedSerie<{ id: string | number }, RawDatum>[]\n    formatX: (value: RawDatum['x']) => string | number\n    formatY: (value: RawDatum['x']) => string | number\n    getNodeId: (d: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'>) => string\n}): Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] => {\n    const points: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] = []\n\n    series.forEach(serie => {\n        serie.data.forEach((d, serieIndex) => {\n            const point: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'> = {\n                index: points.length,\n                serieIndex,\n                serieId: serie.id,\n                x: d.position.x as number,\n                xValue: d.data.x,\n                formattedX: formatX(d.data.x),\n                y: d.position.y as number,\n                yValue: d.data.y,\n                formattedY: formatY(d.data.y),\n                data: d.data,\n            }\n\n            points.push({\n                ...point,\n                id: getNodeId(point),\n            })\n        })\n    })\n\n    return points\n}\n","import { useMemo } from 'react'\nimport { useValueFormatter, usePropertyAccessor } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { useAnnotations } from '@nivo/annotations'\nimport { computePoints, getNodeSizeGenerator } from './compute'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDataProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n} from './types'\n\nconst useNodeSize = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => useMemo(() => getNodeSizeGenerator<RawDatum>(size), [size])\n\nexport const useScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScaleSpec,\n    xFormat,\n    yScaleSpec,\n    yFormat,\n    width,\n    height,\n    nodeId,\n    nodeSize,\n    colors,\n}: {\n    data: ScatterPlotDataProps<RawDatum>['data']\n    xScaleSpec: ScatterPlotCommonProps<RawDatum>['xScale']\n    xFormat?: ScatterPlotCommonProps<RawDatum>['xFormat']\n    yScaleSpec: ScatterPlotCommonProps<RawDatum>['yScale']\n    yFormat?: ScatterPlotCommonProps<RawDatum>['yFormat']\n    width: number\n    height: number\n    nodeId: ScatterPlotCommonProps<RawDatum>['nodeId']\n    nodeSize: ScatterPlotCommonProps<RawDatum>['nodeSize']\n    colors: ScatterPlotCommonProps<RawDatum>['colors']\n}) => {\n    const { series, xScale, yScale } = useMemo(\n        () =>\n            computeXYScalesForSeries<{ id: string | number }, RawDatum>(\n                data,\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getNodeId = usePropertyAccessor(nodeId)\n    const rawNodes = useMemo(\n        () => computePoints<RawDatum>({ series, formatX, formatY, getNodeId }),\n        [series, formatX, formatY, getNodeId]\n    )\n\n    const getNodeSize = useNodeSize<RawDatum>(nodeSize)\n\n    const getColor = useOrdinalColorScale(colors, 'serieId')\n\n    const nodes: ScatterPlotNodeData<RawDatum>[] = useMemo(\n        () =>\n            rawNodes.map(rawNode => ({\n                ...rawNode,\n                size: getNodeSize(rawNode),\n                color: getColor({ serieId: rawNode.serieId }),\n            })),\n        [rawNodes, getNodeSize, getColor]\n    )\n\n    const legendData = useMemo(\n        () =>\n            series.map(serie => ({\n                id: serie.id,\n                label: serie.id,\n                color: getColor({ serieId: serie.id }),\n            })),\n        [series, getColor]\n    )\n\n    return {\n        xScale,\n        yScale,\n        nodes,\n        legendData,\n    }\n}\n\nexport const useScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>(\n    items: ScatterPlotNodeData<RawDatum>[],\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n) =>\n    useAnnotations<ScatterPlotNodeData<RawDatum>>({\n        data: items,\n        annotations,\n        getPosition: (node: ScatterPlotNodeData<RawDatum>) => ({\n            x: node.x,\n            y: node.y,\n        }),\n        getDimensions: (node: ScatterPlotNodeData<RawDatum>) => ({\n            size: node.size,\n            width: node.size,\n            height: node.size,\n        }),\n    })\n","import { animated } from '@react-spring/web'\nimport { ScatterPlotDatum, ScatterPlotNodeProps } from './types'\nimport { useCallback } from 'react'\n\nconst interpolateRadius = (size: number) => size / 2\n\nexport const Node = <RawDatum extends ScatterPlotDatum>({\n    node,\n    style,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: ScatterPlotNodeProps<RawDatum>) => {\n    const handleMouseEnter = useCallback(event => onMouseEnter?.(node, event), [node, onMouseEnter])\n    const handleMouseMove = useCallback(event => onMouseMove?.(node, event), [node, onMouseMove])\n    const handleMouseLeave = useCallback(event => onMouseLeave?.(node, event), [node, onMouseLeave])\n    const handleClick = useCallback(event => onClick?.(node, event), [node, onClick])\n\n    return (\n        <animated.circle\n            cx={style.x}\n            cy={style.y}\n            r={style.size.to(interpolateRadius)}\n            fill={style.color}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ScatterPlotTooltipProps, ScatterPlotDatum } from './types'\n\nexport const Tooltip = <RawDatum extends ScatterPlotDatum>({\n    node,\n}: ScatterPlotTooltipProps<RawDatum>) => (\n    <BasicTooltip\n        id={node.serieId}\n        value={`x: ${node.formattedX}, y: ${node.formattedY}`}\n        enableChip={true}\n        color={node.color}\n    />\n)\n","import { CssMixBlendMode } from '@nivo/core'\nimport { Node } from './Node'\nimport { Tooltip } from './Tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotLayerId,\n    ScatterPlotNodeData,\n} from './types'\n\nexport const commonDefaultProps = {\n    xScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['xScale'],\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['yScale'],\n\n    enableGridX: true,\n    enableGridY: true,\n    axisBottom: {},\n    axisLeft: {},\n\n    nodeId: (({ serieId, index }) => `${serieId}.${index}`) as ScatterPlotCommonProps<\n        ScatterPlotDatum\n    >['nodeId'],\n    nodeSize: 9,\n    nodeComponent: Node,\n\n    colors: { scheme: 'nivo' } as ScatterPlotCommonProps<ScatterPlotDatum>['colors'],\n\n    isInteractive: true,\n    debugMesh: false,\n\n    tooltip: Tooltip,\n\n    markers: [],\n\n    legends: [],\n\n    annotations: [],\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    blendMode: 'normal' as CssMixBlendMode,\n    layers: [\n        'grid',\n        'axes',\n        'nodes',\n        'markers',\n        'mesh',\n        'legends',\n        'annotations',\n    ] as ScatterPlotLayerId[],\n    role: 'img',\n    useMesh: true,\n    animate: true,\n    motionConfig: 'default',\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'nodes', 'mesh', 'legends', 'annotations'] as ScatterPlotLayerId[],\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n    renderNode: (ctx: CanvasRenderingContext2D, node: ScatterPlotNodeData<ScatterPlotDatum>) => {\n        ctx.beginPath()\n        ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n        ctx.fillStyle = node.color\n        ctx.fill()\n    },\n}\n","import { Annotation } from '@nivo/annotations'\nimport { useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface ScatterPlotAnnotationsProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n}\n\nexport const ScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    annotations,\n}: ScatterPlotAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { CssMixBlendMode, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNode,\n    ScatterPlotNodeData,\n} from './types'\nimport { createElement, useCallback } from 'react'\n\ninterface NodesProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    nodeComponent: ScatterPlotNode<RawDatum>\n    isInteractive: boolean\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    blendMode: CssMixBlendMode\n}\n\nconst getNodeKey = <RawDatum extends ScatterPlotDatum>(node: ScatterPlotNodeData<RawDatum>) =>\n    node.id\nconst regularTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color,\n})\nconst leaveTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color,\n})\n\nexport const Nodes = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    nodeComponent,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    blendMode,\n}: NodesProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        ScatterPlotNodeData<RawDatum>,\n        {\n            x: number\n            y: number\n            size: number\n            color: string\n        }\n    >(nodes, {\n        keys: getNodeKey,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseEnter = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (node, event) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n    const handleClick = useCallback((node, event) => onClick?.(node, event), [onClick])\n\n    return (\n        <>\n            {transition((style, node) =>\n                createElement(nodeComponent, {\n                    node,\n                    style,\n                    blendMode,\n                    isInteractive,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onClick: isInteractive ? handleClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n","import { createElement, useCallback } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface MeshProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    width: number\n    height: number\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    debug: boolean\n}\n\nexport const Mesh = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    width,\n    height,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}: MeshProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={nodes}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n","import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions, CartesianMarkers } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useScatterPlot } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { ScatterPlotAnnotations } from './ScatterPlotAnnotations'\nimport { Nodes } from './Nodes'\nimport { Mesh } from './Mesh'\nimport { ScatterPlotDatum, ScatterPlotLayerId, ScatterPlotSvgProps } from './types'\n\ntype InnerScatterPlotProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = svgDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = svgDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    colors = svgDefaultProps.colors,\n    blendMode = svgDefaultProps.blendMode,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = svgDefaultProps.nodeSize,\n    nodeComponent = svgDefaultProps.nodeComponent,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    annotations = svgDefaultProps.annotations,\n    isInteractive = svgDefaultProps.isInteractive,\n    useMesh = svgDefaultProps.useMesh,\n    debugMesh = svgDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip,\n    markers = svgDefaultProps.markers,\n    legends = svgDefaultProps.legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerScatterPlotProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    const layerById: Record<ScatterPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        nodes: null,\n        markers: null,\n        mesh: null,\n        annotations: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as any) : null}\n                yScale={enableGridY ? (yScale as any) : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <Nodes<RawDatum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                blendMode={blendMode}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<RawDatum['x'], RawDatum['y']>\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (value: RawDatum['x']) => number}\n                yScale={yScale as (value: RawDatum['y']) => number}\n            />\n        )\n    }\n\n    if (layers.includes('mesh') && isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh<RawDatum>\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <ScatterPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legendData}\n            />\n        ))\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'string' && layerById[layer] !== undefined) {\n                    return layerById[layer]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                throw new Error(`Unknown layer (${layer})`)\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const ScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ScatterPlotSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerScatterPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlot } from './ScatterPlot'\nimport { ScatterPlotDatum, ScatterPlotSvgProps } from './types'\n\nexport const ResponsiveScatterPlot = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ScatterPlot<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","import { createElement, useRef, useState, useEffect, useCallback, useMemo } from 'react'\nimport { Container, useDimensions, useTheme, getRelativeCursor, isCursorInRect } from '@nivo/core'\nimport { renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { CanvasAxisProp, renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { canvasDefaultProps, svgDefaultProps } from './props'\nimport { useScatterPlot, useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ntype InnerScatterPlotCanvasProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = canvasDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = canvasDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = canvasDefaultProps.nodeSize,\n    renderNode = canvasDefaultProps.renderNode,\n    enableGridX = canvasDefaultProps.enableGridX,\n    gridXValues,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    annotations = canvasDefaultProps.annotations,\n    isInteractive = canvasDefaultProps.isInteractive,\n    debugMesh = canvasDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip,\n    legends = canvasDefaultProps.legends,\n}: InnerScatterPlotCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ScatterPlotNodeData<RawDatum> | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas<RawDatum['x']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale as any,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas<RawDatum['y']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale as any,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ScatterPlotNodeData<RawDatum>>(ctx, {\n                    annotations: boundAnnotations as any,\n                    theme,\n                })\n            } else if (layer === 'axes') {\n                renderAxesToCanvas<RawDatum['x'], RawDatum['y']>(ctx, {\n                    xScale: xScale as any,\n                    yScale: yScale as any,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop as CanvasAxisProp<RawDatum['x']>,\n                    right: axisRight as CanvasAxisProp<RawDatum['y']>,\n                    bottom: axisBottom as CanvasAxisProp<RawDatum['x']>,\n                    left: axisLeft as CanvasAxisProp<RawDatum['y']>,\n                    theme,\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, node)\n                })\n            } else if (layer === 'mesh') {\n                if (debugMesh === true) {\n                    renderVoronoiToCanvas(ctx, voronoi!)\n                    if (currentNode) {\n                        renderVoronoiCellToCanvas(ctx, voronoi!, currentNode.index)\n                    }\n                }\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            } else {\n                throw new Error(`Invalid layer: ${layer}`)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        renderNode,\n        layers,\n        customLayerProps,\n        theme,\n        xScale,\n        yScale,\n        nodes,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        legendData,\n        debugMesh,\n        voronoi,\n        currentNode,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const getNodeFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current!, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const handleMouseHover = useCallback(\n        event => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event)\n                if (currentNode && currentNode.id !== node.id) {\n                    onMouseLeave && onMouseLeave(currentNode, event)\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                if (!currentNode) {\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                onMouseMove && onMouseMove(node, event)\n            } else {\n                hideTooltip()\n                currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n            }\n        },\n        [\n            getNodeFromMouseEvent,\n            currentNode,\n            setCurrentNode,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentNode(null)\n            currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n        },\n        [hideTooltip, currentNode, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const node = getNodeFromMouseEvent(event)\n                node && onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: ScatterPlotCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n        <InnerScatterPlotCanvas<RawDatum> {...props} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlotCanvas } from './ScatterPlotCanvas'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum } from './types'\n\nexport const ResponsiveScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <ScatterPlotCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"]},"metadata":{},"sourceType":"module"}